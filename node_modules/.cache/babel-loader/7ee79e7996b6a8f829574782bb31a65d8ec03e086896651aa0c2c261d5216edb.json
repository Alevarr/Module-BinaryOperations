{"ast":null,"code":"import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\n\n// export class GraphGenerator {\n\n//     public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false){\n//         let graph: Graph<T1, T2> = new Graph()\n//         for (let i = 0; i < n_vertex; i++){\n//             let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n//             graph.addNode(node)\n//         }\n//         let edges_ids: number[] = [0]\n//         graph.nodes.forEach(node1 => {\n//             graph.nodes.forEach(node2 => {\n//                 if (node1.id !== node2.id) {\n//                     let prob = Math.random()\n//                     if (p_connected > prob){\n//                         let index = 1\n//                         if (edges_ids && edges_ids.at(-1)){\n//                             index = edges_ids[edges_ids.length - 1] + 1\n//                         }\n//                         edges_ids.push(index)\n//                         let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\")\n//                         graph.addEdge(edge)\n//                     }\n//                 }\n//             });\n//         });\n//         return graph\n//     }\n\n// }\n\nexport class GraphGenerator {\n  static random(n_vertex, p_connected, selfconn = false) {\n    let graph = new Graph();\n\n    // Создаем вершины\n    for (let i = 0; i < n_vertex; i++) {\n      let node = new Node(i.toString(), i.toString(), \"\");\n      graph.addNode(node);\n    }\n\n    // Создаем две компоненты связности\n    let component1 = [];\n    let component2 = [];\n\n    // Случайным образом распределяем вершины по компонентам\n    graph.nodes.forEach(node => {\n      if (Math.random() < 0.5) {\n        component1.push(node);\n      } else {\n        component2.push(node);\n      }\n    });\n\n    // Функция для добавления ребер внутри компоненты\n    function addEdges(nodes, otherComponent) {\n      let edges_ids = [0];\n      nodes.forEach(node1 => {\n        let hasEdge = false;\n        nodes.forEach(node2 => {\n          if (node1.id !== node2.id && graph.hasEdgeBetween(node1, node2)) {\n            hasEdge = true;\n          }\n        });\n        // Проверяем, если у вершины нет выходящих ребер\n        if (!hasEdge) {\n          // Выбираем случайную вершину из другой компоненты\n          let randomNode = otherComponent[Math.floor(Math.random() * otherComponent.length)];\n          // Создаем ребро между этой вершиной и случайной вершиной\n          let index = edges_ids.length;\n          edges_ids.push(index);\n          let edge = new Edge(index.toString(), node1, randomNode, \"\", \"0\");\n          graph.addEdge(edge);\n        }\n        nodes.forEach(node2 => {\n          if (node1.id !== node2.id && !selfconn) {\n            let prob = Math.random();\n            if (p_connected > prob) {\n              let index = edges_ids.length;\n              edges_ids.push(index);\n              let edge = new Edge(index.toString(), node1, node2, \"\", \"0\");\n              graph.addEdge(edge);\n            }\n          }\n        });\n      });\n    }\n\n    // Добавляем ребра в обе компоненты\n    addEdges(component1, component2);\n    addEdges(component2, component1);\n    return graph;\n  }\n}","map":{"version":3,"names":["Graph","Node","Edge","GraphGenerator","random","n_vertex","p_connected","selfconn","graph","i","node","toString","addNode","component1","component2","nodes","forEach","Math","push","addEdges","otherComponent","edges_ids","node1","hasEdge","node2","id","hasEdgeBetween","randomNode","floor","length","index","edge","addEdge","prob"],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/GraphLibrary/GraphGenerator.tsx"],"sourcesContent":["import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\n\n\n// export class GraphGenerator {\n    \n//     public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false){\n//         let graph: Graph<T1, T2> = new Graph()\n//         for (let i = 0; i < n_vertex; i++){\n//             let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n//             graph.addNode(node)\n//         }\n//         let edges_ids: number[] = [0]\n//         graph.nodes.forEach(node1 => {\n//             graph.nodes.forEach(node2 => {\n//                 if (node1.id !== node2.id) {\n//                     let prob = Math.random()\n//                     if (p_connected > prob){\n//                         let index = 1\n//                         if (edges_ids && edges_ids.at(-1)){\n//                             index = edges_ids[edges_ids.length - 1] + 1\n//                         }\n//                         edges_ids.push(index)\n//                         let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\")\n//                         graph.addEdge(edge)\n//                     }\n//                 }\n//             });\n//         });\n//         return graph\n//     }\n\n// }\n\nexport class GraphGenerator {\n    \n    public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false) {\n        let graph: Graph<T1, T2> = new Graph();\n        \n        // Создаем вершины\n        for (let i = 0; i < n_vertex; i++) {\n            let node: Node<T1> = new Node(i.toString(), i.toString(), \"\");\n            graph.addNode(node);\n        }\n        \n        // Создаем две компоненты связности\n        let component1: Node<T1>[] = [];\n        let component2: Node<T1>[] = [];\n        \n        // Случайным образом распределяем вершины по компонентам\n        graph.nodes.forEach(node => {\n            if (Math.random() < 0.5) {\n                component1.push(node);\n            } else {\n                component2.push(node);\n            }\n        });\n\n        // Функция для добавления ребер внутри компоненты\n        function addEdges(nodes: Node<T1>[], otherComponent: Node<T1>[]) {\n            let edges_ids: number[] = [0];\n            nodes.forEach(node1 => {\n                let hasEdge = false;\n                nodes.forEach(node2 => {\n                    if (node1.id !== node2.id && graph.hasEdgeBetween(node1, node2)) {\n                        hasEdge = true;\n                    }\n                });\n                // Проверяем, если у вершины нет выходящих ребер\n                if (!hasEdge) {\n                    // Выбираем случайную вершину из другой компоненты\n                    let randomNode = otherComponent[Math.floor(Math.random() * otherComponent.length)];\n                    // Создаем ребро между этой вершиной и случайной вершиной\n                    let index = edges_ids.length;\n                    edges_ids.push(index);\n                    let edge: Edge<T1, T2> = new Edge(index.toString(), node1, randomNode, \"\", \"0\");\n                    graph.addEdge(edge);\n                }\n                nodes.forEach(node2 => {\n                    if (node1.id !== node2.id && !selfconn) {\n                        let prob = Math.random();\n                        if (p_connected > prob) {\n                            let index = edges_ids.length;\n                            edges_ids.push(index);\n                            let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\");\n                            graph.addEdge(edge);\n                        }\n                    }\n                });\n            });\n        }\n\n        // Добавляем ребра в обе компоненты\n        addEdges(component1, component2);\n        addEdges(component2, component1);\n\n        return graph;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}