{"ast":null,"code":"import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\n\n// export class GraphGenerator {\n\n//     public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false){\n//         let graph: Graph<T1, T2> = new Graph()\n//         for (let i = 0; i < n_vertex; i++){\n//             let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n//             graph.addNode(node)\n//         }\n//         let edges_ids: number[] = [0]\n//         graph.nodes.forEach(node1 => {\n//             graph.nodes.forEach(node2 => {\n//                 if (node1.id !== node2.id) {\n//                     let prob = Math.random()\n//                     if (p_connected > prob){\n//                         let index = 1\n//                         if (edges_ids && edges_ids.at(-1)){\n//                             index = edges_ids[edges_ids.length - 1] + 1\n//                         }\n//                         edges_ids.push(index)\n//                         let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\")\n//                         graph.addEdge(edge)\n//                     }\n//                 }\n//             });\n//         });\n//         return graph\n//     }\n\n// }\n\nexport class GraphGenerator {\n  static random(n_vertex, p_connected, selfconn = false) {\n    let graph = new Graph();\n\n    // Создаем узлы графа\n    for (let i = 0; i < n_vertex; i++) {\n      let node = new Node(i.toString(), i.toString(), \"\");\n      graph.addNode(node);\n    }\n\n    // Создаем связи между узлами\n    graph.nodes.forEach(node1 => {\n      graph.nodes.forEach(node2 => {\n        if (node1.id !== node2.id || selfconn) {\n          // Проверяем, чтобы узлы не были одинаковыми, если не разрешены петли\n          let prob = Math.random();\n          if (p_connected > prob) {\n            // Соединяем узлы с вероятностью p_connected\n            let edgeId = `${node1.id}_${node2.id}`; // ID ребра\n            let edge = new Edge(edgeId, node1, node2, \"\", \"0\"); // Создаем ребро\n            graph.addEdge(edge); // Добавляем ребро в граф\n          }\n        }\n      });\n    });\n    return graph;\n  }\n}","map":{"version":3,"names":["Graph","Node","Edge","GraphGenerator","random","n_vertex","p_connected","selfconn","graph","i","node","toString","addNode","nodes","forEach","node1","node2","id","prob","Math","edgeId","edge","addEdge"],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/GraphLibrary/GraphGenerator.tsx"],"sourcesContent":["import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\n\n\n// export class GraphGenerator {\n    \n//     public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false){\n//         let graph: Graph<T1, T2> = new Graph()\n//         for (let i = 0; i < n_vertex; i++){\n//             let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n//             graph.addNode(node)\n//         }\n//         let edges_ids: number[] = [0]\n//         graph.nodes.forEach(node1 => {\n//             graph.nodes.forEach(node2 => {\n//                 if (node1.id !== node2.id) {\n//                     let prob = Math.random()\n//                     if (p_connected > prob){\n//                         let index = 1\n//                         if (edges_ids && edges_ids.at(-1)){\n//                             index = edges_ids[edges_ids.length - 1] + 1\n//                         }\n//                         edges_ids.push(index)\n//                         let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\")\n//                         graph.addEdge(edge)\n//                     }\n//                 }\n//             });\n//         });\n//         return graph\n//     }\n\n// }\n\nexport class GraphGenerator {\n    public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false) {\n        let graph: Graph<T1, T2> = new Graph();\n\n        // Создаем узлы графа\n        for (let i = 0; i < n_vertex; i++) {\n            let node: Node<T1> = new Node(i.toString(), i.toString(), \"\");\n            graph.addNode(node);\n        }\n\n        // Создаем связи между узлами\n        graph.nodes.forEach(node1 => {\n            graph.nodes.forEach(node2 => {\n                if (node1.id !== node2.id || selfconn) { // Проверяем, чтобы узлы не были одинаковыми, если не разрешены петли\n                    let prob = Math.random();\n                    if (p_connected > prob) { // Соединяем узлы с вероятностью p_connected\n                        let edgeId = `${node1.id}_${node2.id}`; // ID ребра\n                        let edge: Edge<T1, T2> = new Edge(edgeId, node1, node2, \"\", \"0\"); // Создаем ребро\n                        graph.addEdge(edge); // Добавляем ребро в граф\n                    }\n                }\n            });\n        });\n\n        return graph;\n    }\n}\n\n\n\n\n\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,SAAS;AAC/B,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,IAAI,QAAQ,QAAQ;;AAG7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,MAAMC,cAAc,CAAC;EACxB,OAAcC,MAAMA,CAASC,QAAgB,EAAEC,WAAmB,EAAEC,QAAiB,GAAG,KAAK,EAAE;IAC3F,IAAIC,KAAoB,GAAG,IAAIR,KAAK,CAAC,CAAC;;IAEtC;IACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;MAC/B,IAAIC,IAAc,GAAG,IAAIT,IAAI,CAACQ,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAEF,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;MAC7DH,KAAK,CAACI,OAAO,CAACF,IAAI,CAAC;IACvB;;IAEA;IACAF,KAAK,CAACK,KAAK,CAACC,OAAO,CAACC,KAAK,IAAI;MACzBP,KAAK,CAACK,KAAK,CAACC,OAAO,CAACE,KAAK,IAAI;QACzB,IAAID,KAAK,CAACE,EAAE,KAAKD,KAAK,CAACC,EAAE,IAAIV,QAAQ,EAAE;UAAE;UACrC,IAAIW,IAAI,GAAGC,IAAI,CAACf,MAAM,CAAC,CAAC;UACxB,IAAIE,WAAW,GAAGY,IAAI,EAAE;YAAE;YACtB,IAAIE,MAAM,GAAI,GAAEL,KAAK,CAACE,EAAG,IAAGD,KAAK,CAACC,EAAG,EAAC,CAAC,CAAC;YACxC,IAAII,IAAkB,GAAG,IAAInB,IAAI,CAACkB,MAAM,EAAEL,KAAK,EAAEC,KAAK,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;YAClER,KAAK,CAACc,OAAO,CAACD,IAAI,CAAC,CAAC,CAAC;UACzB;QACJ;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAOb,KAAK;EAChB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}