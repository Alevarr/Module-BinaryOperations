{"ast":null,"code":"import { Node } from './Node';\nconst ERROR_MSG_INCORRECT_TYPES = \"Incorrect input types!\";\nexport class Graph {\n  constructor(nodes, edges, is_directed) {\n    this._nodes = [];\n    this._edges = [];\n    this._is_directed = false;\n    if (nodes) {\n      this._nodes = nodes;\n    }\n    if (edges) {\n      this._edges = edges;\n    }\n    if (is_directed) {\n      this._is_directed = is_directed;\n    }\n  }\n  get nodes() {\n    return this._nodes;\n  }\n  get edges() {\n    return this._edges;\n  }\n  get is_directed() {\n    return this._is_directed;\n  }\n  addNode(node) {\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (this._nodes[i].id === node.id) {\n        return;\n      }\n    }\n    this._nodes.push(node);\n  }\n  addEdge(edge) {\n    for (let i = 0; i < this._edges.length; i++) {\n      if (this._edges[i].id === edge.id) {\n        return;\n      }\n    }\n    this._edges.push(edge);\n  }\n  getNode(node_id) {\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (this._nodes[i].id === node_id) {\n        return this._nodes[i];\n      }\n    }\n  }\n  getAdjNodes(node) {\n    let adj_nodes = [];\n    let output_edges = this.getOutputEdge(node);\n    for (let i = 0; i < output_edges.length; i++) {\n      if (output_edges[i].source.id === node.id) {\n        adj_nodes.push(output_edges[i].target);\n      } else {\n        adj_nodes.push(output_edges[i].source);\n      }\n    }\n    return adj_nodes;\n  }\n  getAdjEdges(edge) {\n    let adj_edges = [];\n    for (let i = 0; i < this._edges.length; i++) {\n      if ((this._edges[i].source.id === edge.source.id || this._edges[i].source.id === edge.target.id || this._edges[i].target.id === edge.source.id || this._edges[i].target.id === edge.target.id) && this._edges[i].id !== edge.id) {\n        adj_edges.push(this._edges[i]);\n      }\n    }\n    return adj_edges;\n  }\n  getEdge(edgeid_or_source, target) {\n    if (edgeid_or_source instanceof Number) {\n      for (let i = 0; i < this._edges.length; i++) {\n        if (this._edges[i].id === edgeid_or_source) {\n          return this._edges[i];\n        }\n      }\n    } else if (target && edgeid_or_source instanceof Node) {\n      for (let i = 0; i < this._edges.length; i++) {\n        if (this._edges[i].source.id === edgeid_or_source.id) {\n          if (this._edges[i].target.id === target.id) {\n            return this._edges[i];\n          }\n        }\n        if (!this._is_directed) {\n          if (this._edges[i].target.id === edgeid_or_source.id) {\n            if (this._edges[i].source.id === target.id) {\n              return this._edges[i];\n            }\n          }\n        }\n      }\n    } else if (edgeid_or_source instanceof Number && target) {\n      reportError(ERROR_MSG_INCORRECT_TYPES);\n    } else return;\n  }\n  getOutputEdge(node) {\n    let output_edges = [];\n    for (let i = 0; i < this._edges.length; i++) {\n      if (this._edges[i].source.id === node.id) {\n        output_edges.push(this._edges[i]);\n      }\n      if (!this._is_directed) {\n        if (this._edges[i].target.id === node.id) {\n          if (this._edges[i].source.id !== this._edges[i].target.id) {\n            output_edges.push(this._edges[i]);\n          }\n        }\n      }\n    }\n    return output_edges;\n  }\n  getInputEdge(node) {\n    let input_edges = [];\n    for (let i = 0; i < this._edges.length; i++) {\n      if (this._edges[i].target.id === node.id) {\n        input_edges.push(this._edges[i]);\n      }\n      if (!this._is_directed) {\n        if (this._edges[i].target.id === node.id) {\n          if (this._edges[i].source.id !== this._edges[i].target.id) {\n            input_edges.push(this._edges[i]);\n          }\n        }\n      }\n    }\n    return input_edges;\n  }\n  popNode(node) {\n    let relatedEdge = this.getOutputEdge(node);\n    relatedEdge.forEach(edge => {\n      let index = this._edges.indexOf(edge, 0);\n      if (index > -1) {\n        this._edges.splice(index, 1);\n      }\n    });\n    let index = this._nodes.indexOf(node, 0);\n    if (index > -1) {\n      this._nodes.splice(index, 1);\n    }\n  }\n  popEdge(edge) {\n    this._edges = this._edges.filter(edgei => edgei.id !== edge.id);\n  }\n  toJSONFormat() {\n    let elements = [];\n    this._nodes.forEach(node => {\n      let dct = {\n        data: {\n          id: node.id.toString(),\n          label: node.label,\n          color: node.color\n        }\n      };\n      elements.push(dct);\n    });\n    this._edges.forEach(edge => {\n      let dct = {\n        data: {\n          source: edge.source.id.toString(),\n          target: edge.target.id.toString(),\n          label: edge.label,\n          color: edge.color\n        }\n      };\n      elements.push(dct);\n    });\n    return elements;\n  }\n}","map":{"version":3,"names":["Node","ERROR_MSG_INCORRECT_TYPES","Graph","constructor","nodes","edges","is_directed","_nodes","_edges","_is_directed","addNode","node","i","length","id","push","addEdge","edge","getNode","node_id","getAdjNodes","adj_nodes","output_edges","getOutputEdge","source","target","getAdjEdges","adj_edges","getEdge","edgeid_or_source","Number","reportError","getInputEdge","input_edges","popNode","relatedEdge","forEach","index","indexOf","splice","popEdge","filter","edgei","toJSONFormat","elements","dct","data","toString","label","color"],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/GraphLibrary/Graph.tsx"],"sourcesContent":["import React from 'react';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport { ElementDefinition } from 'cytoscape';\nimport { Template } from '../Template';\n\n\nconst ERROR_MSG_INCORRECT_TYPES = \"Incorrect input types!\"\n\n\ninterface IGraph<T1, T2> {\n    nodes: Node<T1>[]\n    edges: Edge<T1, T2>[]\n    is_directed: boolean\n}\n\n\nexport class Graph<T1, T2> implements IGraph<T1, T2> {\n\n    private _nodes: Node<T1>[] = []\n    private _edges: Edge<T1, T2>[] = []\n    private _is_directed: boolean = false\n\n    constructor(nodes?: Node<T1>[], edges?: Edge<T1, T2>[], is_directed?: boolean) {\n        if (nodes){\n            this._nodes = nodes\n        }\n        if (edges){\n            this._edges = edges\n        }\n        if (is_directed) {\n            this._is_directed = is_directed\n        }\n    }\n\n    get nodes(){\n        return this._nodes\n    }\n\n    get edges(){\n        return this._edges\n    }\n\n    get is_directed(){\n        return this._is_directed\n    }\n\n    public addNode(node: Node<T1>){\n        for (let i = 0; i < this._nodes.length; i++){\n            if (this._nodes[i].id === node.id){\n                return\n            }\n        }\n        this._nodes.push(node)\n    }\n\n    public addEdge(edge: Edge<T1, T2>){\n        for (let i = 0; i < this._edges.length; i++){\n            if (this._edges[i].id === edge.id){\n                return\n            }\n        }\n        this._edges.push(edge)\n    }\n\n    public getNode(node_id: string){\n\n        for (let i = 0; i < this._nodes.length; i++){\n            if (this._nodes[i].id === node_id){\n                return this._nodes[i]\n            }\n        }\n    }\n\n    public getAdjNodes(node: Node<T1>){\n        let adj_nodes: Node<T1>[] = []\n        let output_edges = this.getOutputEdge(node)\n        for (let i = 0; i < output_edges.length; i++){\n            if (output_edges[i].source.id === node.id){\n                adj_nodes.push(output_edges[i].target)\n            }\n            else{\n                adj_nodes.push(output_edges[i].source)\n            }                \n        }\n        return adj_nodes\n    }\n\n    public getAdjEdges(edge: Edge<T1, T2>){\n        let adj_edges: Edge<T1, T2>[] = []\n        for (let i = 0; i < this._edges.length; i++){\n            if ((this._edges[i].source.id === edge.source.id || this._edges[i].source.id === edge.target.id ||\n                this._edges[i].target.id === edge.source.id || this._edges[i].target.id === edge.target.id) && this._edges[i].id !== edge.id){\n                adj_edges.push(this._edges[i])\n            }                \n        }\n        return adj_edges\n    }\n    \n    public getEdge(edgeid_or_source: string | Node<T1>, target?: Node<T1>){\n        if (edgeid_or_source instanceof Number){\n            for (let i = 0; i < this._edges.length; i++){\n                if (this._edges[i].id === edgeid_or_source){\n                    return this._edges[i]\n                }\n            }\n        }\n        else if (target && edgeid_or_source instanceof Node){\n            for (let i = 0; i < this._edges.length; i++){\n                if (this._edges[i].source.id === edgeid_or_source.id){\n                    if (this._edges[i].target.id === target.id){\n                        return this._edges[i]\n                    }\n                }\n                if (!this._is_directed){\n                    if (this._edges[i].target.id === edgeid_or_source.id){\n                        if (this._edges[i].source.id === target.id){\n                            return this._edges[i]\n                        }\n                    }\n                }\n            }\n        }\n        else if (edgeid_or_source instanceof Number && target){\n            reportError(ERROR_MSG_INCORRECT_TYPES)\n        }\n        else return\n    }\n\n    public getOutputEdge(node: Node<T1>){\n        let output_edges: Edge<T1, T2>[] = []\n        for (let i = 0; i < this._edges.length; i++){\n            if (this._edges[i].source.id === node.id){\n                output_edges.push(this._edges[i])\n            }\n            if (!this._is_directed){\n                if (this._edges[i].target.id === node.id){\n                    if (this._edges[i].source.id !== this._edges[i].target.id){\n                        output_edges.push(this._edges[i])\n                    }\n                }\n            }\n        }\n        return output_edges\n    }\n\n    public getInputEdge(node: Node<T1>){\n        let input_edges: Edge<T1, T2>[] = []\n        for (let i = 0; i < this._edges.length; i++){\n            if (this._edges[i].target.id === node.id){\n                input_edges.push(this._edges[i])\n            }\n            if (!this._is_directed){\n                if (this._edges[i].target.id === node.id){\n                    if (this._edges[i].source.id !== this._edges[i].target.id){\n                        input_edges.push(this._edges[i])\n                    }\n                }\n            }\n        }\n        return input_edges\n    }\n\n    public popNode(node: Node<T1>){\n        let relatedEdge = this.getOutputEdge(node)\n        relatedEdge.forEach(edge => {\n            let index = this._edges.indexOf(edge, 0)\n            if (index > -1) {\n                this._edges.splice(index, 1)\n            }\n        });\n        let index = this._nodes.indexOf(node, 0)\n        if (index > -1) {\n            this._nodes.splice(index, 1)\n        }\n    }\n\n    public popEdge(edge: Edge<T1, T2>){\n        this._edges = this._edges.filter((edgei) => edgei.id !== edge.id)\n    }\n\n    public toJSONFormat(){\n        let elements: ElementDefinition[] = []\n        this._nodes.forEach(node => {\n            let dct = {\n                data: {\n                    id: node.id.toString(),\n                    label: node.label,\n                    color: node.color\n                }\n            }\n            \n            elements.push(dct)\n        });\n        this._edges.forEach(edge => {\n            let dct = {\n                data: {\n                    source: edge.source.id.toString(),\n                    target: edge.target.id.toString(),\n                    label: edge.label,\n                    color: edge.color\n                }\n            }\n            elements.push(dct)\n        });\n\n        \n\n\n        return elements\n    }\n\n    \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}