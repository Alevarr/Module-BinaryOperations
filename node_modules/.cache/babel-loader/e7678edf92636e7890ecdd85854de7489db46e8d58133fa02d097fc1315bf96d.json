{"ast":null,"code":"import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\nexport class GraphGenerator {\n  static random(n_vertex, p_connected, selfconn = false) {\n    let graph = new Graph();\n    for (let i = 0; i < n_vertex; i++) {\n      let node = new Node(i.toString(), i.toString(), \"\");\n      graph.addNode(node);\n    }\n    let edges_ids = [0];\n    graph.nodes.forEach(node1 => {\n      graph.nodes.forEach(node2 => {\n        if (node1.id !== node2.id) {\n          let prob = Math.random();\n          if (p_connected > prob) {\n            let index = 1;\n            if (edges_ids && edges_ids.at(-1)) {\n              index = edges_ids[edges_ids.length - 1] + 1;\n            }\n            edges_ids.push(index);\n            let edge = new Edge(index.toString(), node1, node2, \"\", \"0\");\n            graph.addEdge(edge);\n          }\n        }\n      });\n    });\n    return graph;\n  }\n}\nclass GraphGenerator_1 {\n  static generateTwoConnectedComponentsGraph() {\n    // Создаем объект графа\n    const graph = new Graph();\n\n    // Создаем первый связный граф\n    const component1 = this.generateConnectedComponent(graph);\n\n    // Создаем второй связный граф\n    const component2 = this.generateConnectedComponent(graph);\n\n    // Соединяем два связных графа одним ребром\n    const nodeFromComponent1 = component1.nodes[Math.floor(Math.random() * component1.nodes.length)];\n    const nodeFromComponent2 = component2.nodes[Math.floor(Math.random() * component2.nodes.length)];\n    const edgeId = `EdgeBetweenComponents`;\n    const edge = new Edge(edgeId, nodeFromComponent1, nodeFromComponent2);\n    graph.addEdge(edge);\n    return graph;\n  }\n  static generateConnectedComponent(graph) {\n    const component = new Graph();\n    const numNodes = Math.floor(Math.random() * 5) + 3; // Случайное количество узлов\n\n    // Создаем узлы\n    for (let i = 0; i < numNodes; i++) {\n      const nodeId = `Node${i}`;\n      const nodeLabel = `Node ${i}`;\n      const node = new Node(nodeId, nodeLabel);\n      component.addNode(node);\n    }\n\n    // Создаем ребра для связности\n    for (let i = 0; i < numNodes - 1; i++) {\n      const source = component.nodes[i];\n      const target = component.nodes[i + 1];\n      const edgeId = `Edge${i}`;\n      const edge = new Edge(edgeId, source, target);\n      component.addEdge(edge);\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["Graph","Node","Edge","GraphGenerator","random","n_vertex","p_connected","selfconn","graph","i","node","toString","addNode","edges_ids","nodes","forEach","node1","node2","id","prob","Math","index","at","length","push","edge","addEdge","GraphGenerator_1","generateTwoConnectedComponentsGraph","component1","generateConnectedComponent","component2","nodeFromComponent1","floor","nodeFromComponent2","edgeId","component","numNodes","nodeId","nodeLabel","source","target"],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/GraphLibrary/GraphGenerator.tsx"],"sourcesContent":["import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\n\n\nexport class GraphGenerator {\n    \n    public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false){\n        let graph: Graph<T1, T2> = new Graph()\n        for (let i = 0; i < n_vertex; i++){\n            let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n            graph.addNode(node)\n        }\n        let edges_ids: number[] = [0]\n        graph.nodes.forEach(node1 => {\n            graph.nodes.forEach(node2 => {\n                if (node1.id !== node2.id) {\n                    let prob = Math.random()\n                    if (p_connected > prob){\n                        let index = 1\n                        if (edges_ids && edges_ids.at(-1)){\n                            index = edges_ids[edges_ids.length - 1] + 1\n                        }\n                        edges_ids.push(index)\n                        let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\")\n                        graph.addEdge(edge)\n                    }\n                }\n            });\n        });\n        return graph\n    }\n\n}\n\nclass GraphGenerator_1{\n    static generateTwoConnectedComponentsGraph(): Graph<any, any> {\n        // Создаем объект графа\n        const graph = new Graph();\n\n        // Создаем первый связный граф\n        const component1 = this.generateConnectedComponent(graph);\n        \n        // Создаем второй связный граф\n        const component2 = this.generateConnectedComponent(graph);\n        \n        // Соединяем два связных графа одним ребром\n        const nodeFromComponent1 = component1.nodes[Math.floor(Math.random() * component1.nodes.length)];\n        const nodeFromComponent2 = component2.nodes[Math.floor(Math.random() * component2.nodes.length)];\n        const edgeId = `EdgeBetweenComponents`;\n        const edge = new Edge(edgeId, nodeFromComponent1, nodeFromComponent2);\n        graph.addEdge(edge);\n\n        return graph;\n    }\n\n    private static generateConnectedComponent(graph: Graph<any, any>): Graph<any, any> {\n        const component = new Graph();\n        const numNodes = Math.floor(Math.random() * 5) + 3; // Случайное количество узлов\n\n        // Создаем узлы\n        for (let i = 0; i < numNodes; i++) {\n            const nodeId = `Node${i}`;\n            const nodeLabel = `Node ${i}`;\n            const node = new Node(nodeId, nodeLabel);\n            component.addNode(node);\n        }\n\n        // Создаем ребра для связности\n        for (let i = 0; i < numNodes - 1; i++) {\n            const source = component.nodes[i];\n            const target = component.nodes[i + 1];\n            const edgeId = `Edge${i}`;\n            const edge = new Edge(edgeId, source, target);\n            component.addEdge(edge);\n        }\n\n        return component;\n    }\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}