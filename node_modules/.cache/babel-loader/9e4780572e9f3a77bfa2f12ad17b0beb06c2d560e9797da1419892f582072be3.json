{"ast":null,"code":"var _jsxFileName = \"/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/ModuleExample/module.tsx\";\nimport { GraphGenerator } from \"../GraphLibrary/GraphGenerator\";\nimport { Template } from \"../Template\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ModuleExample extends Template {\n  task() {\n    let operations = [\"сеодинения графов\", \"объединения графов\", \"пересечения графов\"];\n    let i = Math.floor(Math.random() * 3);\n    let operationString = operations[i];\n    return () => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0441\\u0442\\u0438 \\u043E\\u043F\\u0435\\u0440\\u0430\\u0446\\u0438\\u044E \", operationString]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 22\n    }, this);\n  }\n  generateGraph() {\n    let graph = GraphGenerator.random(5, 0.3);\n    return graph;\n  }\n  isGraphModified() {\n    return true;\n  }\n  isGraphRepainted() {\n    return false;\n  }\n  isGraphNodeRenamed() {\n    return true;\n  }\n  isGraphReweight() {\n    return false;\n  }\n  isVisualizingPolicyChangeble() {\n    return false;\n  }\n  isNodeNameVisible() {\n    return true;\n  }\n  isEdgeWeightVisible() {\n    return false;\n  }\n}","map":{"version":3,"names":["GraphGenerator","Template","jsxDEV","_jsxDEV","ModuleExample","task","operations","i","Math","floor","random","operationString","children","fileName","_jsxFileName","lineNumber","columnNumber","generateGraph","graph","isGraphModified","isGraphRepainted","isGraphNodeRenamed","isGraphReweight","isVisualizingPolicyChangeble","isNodeNameVisible","isEdgeWeightVisible"],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/ModuleExample/module.tsx"],"sourcesContent":["import { Graph } from \"../GraphLibrary/Graph\";\nimport { GraphGenerator } from \"../GraphLibrary/GraphGenerator\";\nimport { Template } from \"../Template\";\n\n\nexport class ModuleExample<T1, T2> extends Template<T1, T2> {\n    \n    protected override task(){\n        let operations: string[] = [\"сеодинения графов\", \"объединения графов\", \"пересечения графов\"];\n        let i = Math.floor(Math.random() * 3);\n        let operationString = operations[i];\n        \n        return () => <p>Провести операцию {operationString}</p>;\n    }\n\n\n    protected override generateGraph(){\n        let graph: Graph<T1, T2> = GraphGenerator.random(5, 0.3)\n        return graph\n    }\n\n    protected override isGraphModified(){\n        return true\n    }\n    \n    protected override isGraphRepainted(){\n        return false\n    }\n    \n    protected override isGraphNodeRenamed(){\n        return true\n    }\n    \n    protected override isGraphReweight(){\n        return false\n    }\n\n    protected isVisualizingPolicyChangeble(){\n        return false\n    }\n    \n    protected override isNodeNameVisible(){\n        return true\n    }\n\n    protected override isEdgeWeightVisible(){\n        return false\n    }\n\n}"],"mappings":";AACA,SAASA,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,QAAQ,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvC,OAAO,MAAMC,aAAa,SAAiBH,QAAQ,CAAS;EAErCI,IAAIA,CAAA,EAAE;IACrB,IAAIC,UAAoB,GAAG,CAAC,mBAAmB,EAAE,oBAAoB,EAAE,oBAAoB,CAAC;IAC5F,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IACrC,IAAIC,eAAe,GAAGL,UAAU,CAACC,CAAC,CAAC;IAEnC,OAAO,mBAAMJ,OAAA;MAAAS,QAAA,GAAG,oGAAkB,EAACD,eAAe;IAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC3D;EAGmBC,aAAaA,CAAA,EAAE;IAC9B,IAAIC,KAAoB,GAAGlB,cAAc,CAACU,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;IACxD,OAAOQ,KAAK;EAChB;EAEmBC,eAAeA,CAAA,EAAE;IAChC,OAAO,IAAI;EACf;EAEmBC,gBAAgBA,CAAA,EAAE;IACjC,OAAO,KAAK;EAChB;EAEmBC,kBAAkBA,CAAA,EAAE;IACnC,OAAO,IAAI;EACf;EAEmBC,eAAeA,CAAA,EAAE;IAChC,OAAO,KAAK;EAChB;EAEUC,4BAA4BA,CAAA,EAAE;IACpC,OAAO,KAAK;EAChB;EAEmBC,iBAAiBA,CAAA,EAAE;IAClC,OAAO,IAAI;EACf;EAEmBC,mBAAmBA,CAAA,EAAE;IACpC,OAAO,KAAK;EAChB;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}