{"ast":null,"code":"var _jsxFileName = \"/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/GraphLibrary/GraphController.tsx\";\n// import React from 'react';\n// import { Graph } from './Graph';\n// import { Node } from './Node';\n// import cytoscape from 'cytoscape';\n// import { Edge } from './Edge';\n\n// interface IGraphControllerProps<T1, T2> {\n//     id: string,\n//     className: string,\n//     graph: Graph<T1, T2>,\n//     visualization_policy?: string,\n//     is_nodeid_visible?: boolean,\n//     is_weights_visible?: boolean,\n// }\n\n// export class GraphController<T1, T2> extends React.Component<IGraphControllerProps<T1, T2>> {\n\n//     cy?: cytoscape.Core\n\n//     constructor(props: IGraphControllerProps<T1,T2>){\n//             super(props)\n//     }\n\n//     private getDefaultStylesheet() {\n\n//         let styles = [\n//             {\n//                 selector: \"node[label]\", \n//                 style: {}\n//             },\n//             {\n//                 selector: \"edge[label]\", \n//                 style: {}\n//             },\n//         ]\n\n//         if (this.props.is_nodeid_visible){\n//             styles[0].style = {\n//                 label: \"data(label)\",\n//                 \"font-size\": \"18\",\n//             }            \n//             // \"background-color\": \"#527\",\n//         }\n\n//         if (this.props.is_weights_visible){\n//             styles[1].style = {\n//                 label: 'data(label)',\n//                 \"font-size\": \"18\",\n//                 \"edge-text-rotation\": \"autorotate\",\n//                 \"color\": \"#fff\",\n//                 \"text-outline-color\": \"#000\",\n//                 \"text-outline-width\": 3\n//             }\n//         }\n\n//         return styles\n//     }\n\n//     private update_layout(){\n//         if (this.cy){\n//             this.props.graph.nodes.forEach(node => {\n//                 this.cy?.nodes(\"node#\" + node.id)[0].css({'background-color': node.color})\n//                 console.log(\"Node\", node.id, node.color)\n//             });\n//             this.props.graph.edges.forEach(edge => {\n//                 this.cy?.edges('[source = \"'+ edge.source.id + '\"][target = \"' + edge.target.id  + '\"]').style({'line-color': edge.color})\n//                 console.log(\"Edge\", edge.id, edge.color)\n//             });\n//         }\n//     }\n\n//     componentDidMount() {             \n//         this.cy = cytoscape({container: document.getElementById(this.props.id),\n//                             layout: {name: this.props.visualization_policy ?? \"circle\"},\n//                             elements: this.props.graph.toJSONFormat(),\n//                             style: this.getDefaultStylesheet()\n//         })\n//         this.update_layout()\n\n//         document.getElementById(\"addNodeButton\")?.addEventListener(\"click\", this.addNode);\n\n//         document.getElementById(\"deleteNodeButton\")?.addEventListener(\"click\", () => {\n//             let selected = this.cy?.nodes(\":selected\")[0];\n//             if (selected){                \n//                 let delnode = this.props.graph.getNode(selected.id())\n//                 if (delnode){\n//                     this.props.graph.popNode(delnode)\n//                     this.forceUpdate()\n//                 }\n//             }\n//         });\n\n//         document.getElementById(\"concatNodeButton\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.nodes(\":selected\")\n//             if (selected?.length === 2){\n//                 let first = selected[0].id()\n//                 let second = selected[1].id()\n//                 let node1 = this.props.graph.getNode(first)\n//                 let node2 = this.props.graph.getNode(second)\n//                 if (node1 && node2) {\n//                     let edge12: Edge<T1, T2> = new Edge(this.getNewEdgeId(), node1, node2, \"\", \"0\")\n//                     this.props.graph.addEdge(edge12)\n//                     this.forceUpdate()\n//                 }\n//             }\n//         });\n\n//         document.getElementById(\"deleteEdgeButton\")?.addEventListener(\"click\", () => {\n//             let selected = this.cy?.edges(\":selected\")[0];\n//             if (selected){                \n//                 let source = this.props.graph.getNode(selected.source().id())\n//                 let target = this.props.graph.getNode(selected.target().id())\n//                 if (source && target){\n//                     let deledge = this.props.graph.getEdge(source, target)\n//                     if (deledge){\n//                         this.props.graph.popEdge(deledge)\n//                         this.forceUpdate()\n//                     }\n//                 }\n\n//             }\n//         });\n\n//         document.getElementById(\"recolorNodeButton\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.nodes(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node = this.props.graph.getNode(element.id())\n//                     let color = (document.getElementById(\"nodeColor\") as HTMLInputElement).value\n//                     node?.setColor(color)\n//                     this.forceUpdate()\n//                 });\n//             }\n//         });\n\n//         document.getElementById(\"recolorEdgeButton\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.edges(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node_source = this.props.graph.getNode(element.source().id())\n//                     let node_target = this.props.graph.getNode(element.target().id())\n//                     if (node_source && node_target){\n//                         let edge = this.props.graph.getEdge(node_source, node_target)\n//                         let color = (document.getElementById(\"nodeColor\") as HTMLInputElement).value\n//                         edge?.setColor(color)\n//                         this.forceUpdate()\n//                     }\n//                 });\n//             }\n//         });\n\n//         document.getElementById(\"colorAdjNodeButton\")?.addEventListener(\"click\", () => {    \n//             let selected = this.cy?.nodes(\":selected\")[0];\n//             if (selected){         \n//                 let node = this.props.graph.getNode(selected.id())\n//                 if (node){\n//                     let adj_nodes = this.props.graph.getAdjNodes(node)\n//                     adj_nodes.forEach(node =>{\n//                         node.setColor(\"red\")\n//                         this.forceUpdate()\n//                     })\n//                 }\n//             }\n//         });\n\n//         document.getElementById(\"colorAdjEdgeButton\")?.addEventListener(\"click\", () => {    \n//             let selected = this.cy?.edges(\":selected\")[0];\n//             if (selected){                \n//                 let source = this.props.graph.getNode(selected.source().id())\n//                 let target = this.props.graph.getNode(selected.target().id())\n//                 if (source && target){\n//                     let edge = this.props.graph.getEdge(source, target)\n//                     if (edge){\n//                         let adj_edges = this.props.graph.getAdjEdges(edge)\n//                         adj_edges.forEach(edge =>{\n//                             edge.setColor(\"red\")\n//                             this.forceUpdate()\n//                         })\n//                     }\n//                 }                   \n//             }\n//         });\n\n//         document.getElementById(\"uncolorNodeButton\")?.addEventListener(\"click\", () => {    \n//             this.props.graph.nodes.forEach(node => {\n//                 node.setColor(\" \")\n//                 this.forceUpdate()\n//             })\n//             this.props.graph.edges.forEach(edge => {\n//                 edge.setColor(\" \")\n//                 this.forceUpdate()\n//             })\n//         });\n\n//         document.getElementById(\"setNodeName\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.nodes(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node = this.props.graph.getNode(element.id())\n//                     // let label = (document.getElementById(\"nodeNameInput\") as HTMLInputElement).value\n//                     let label = prompt(\"Введите имя вершины\", \"\");\n//                     node?.setLabel(label)\n//                     this.forceUpdate()\n//                 });\n//             }\n//         });\n\n//         document.getElementById(\"setEdgeWeight\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.edges(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node_source = this.props.graph.getNode(element.source().id())\n//                     let node_target = this.props.graph.getNode(element.target().id())\n//                     if (node_source && node_target){\n//                         let edge = this.props.graph.getEdge(node_source, node_target)\n//                         // let weight = (document.getElementById(\"edgeWeightInput\") as HTMLInputElement).value\n//                         let weight = prompt(\"Введите вес ребра\", \"\");\n//                         edge?.setLabel(weight)\n//                         this.forceUpdate()\n//                     }\n//                 });\n//             }\n//         });\n//     }\n\n//     componentDidUpdate(prevProps: Readonly<IGraphControllerProps<T1, T2>>, prevState: Readonly<{}>, snapshot?: any): void {\n//         let elms = this.props.graph.toJSONFormat();\n//         this.cy = cytoscape({container: document.getElementById(this.props.id),\n//                             layout: {name: this.props.visualization_policy ?? \"circle\"},\n//                             elements: elms,\n//                             style: this.getDefaultStylesheet()\n\n//         })\n//         this.update_layout()\n//     }\n\n//     addNode = () => {\n//         let index: number = -1\n//         let indexes: string[] = []\n\n//         this.props.graph.nodes.forEach(node => {\n//             indexes.push(node.id)\n//         });\n\n//         for (let i = 0; i < indexes.length; i++){   \n//             if (!indexes.find((element) => element === (i + 1).toString())){\n//                 index = i + 1\n//             }\n//         }\n//         if (index === -1){\n//             index = indexes.length + 1\n//         }\n\n//         let node: Node<T1> = new Node(index.toString(), index.toString())\n//         this.props.graph.addNode(node)\n//         this.forceUpdate()\n//     }\n\n//     getNewEdgeId = () => {\n//         let index: number = -1\n//         let indexes: string[] = []\n\n//         this.props.graph.edges.forEach(edge => {\n//             indexes.push(edge.id)\n//         });\n\n//         for (let i = 0; i < indexes.length; i++){   \n//             if (!indexes.find((element) => element === (i + 1).toString())){\n//                 index = i + 1\n//             }\n//         }\n//         if (index === -1){\n//             index = indexes.length + 1\n//         }\n//         return index.toString()\n//     }\n\n//     render() {\n//         return <div id={this.props.id} className={this.props.className}></div>\n//     }\n\n// }\n\nimport React from \"react\";\nimport { Node } from \"./Node\";\nimport cytoscape from \"cytoscape\";\nimport { Edge } from \"./Edge\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class GraphController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cy = void 0;\n    this.addNode = () => {\n      let index = -1;\n      let indexes = [];\n      this.props.graph.nodes.forEach(node => {\n        indexes.push(node.id);\n      });\n      for (let i = 0; i < indexes.length; i++) {\n        if (!indexes.find(element => element === (i + 1).toString())) {\n          index = i + 1;\n        }\n      }\n      if (index === -1) {\n        index = indexes.length + 1;\n      }\n      let node = new Node(index.toString(), index.toString());\n      this.props.graph.addNode(node);\n      this.forceUpdate();\n    };\n    this.getNewEdgeId = () => {\n      let index = -1;\n      let indexes = [];\n      this.props.graph.edges.forEach(edge => {\n        indexes.push(edge.id);\n      });\n      for (let i = 0; i < indexes.length; i++) {\n        if (!indexes.find(element => element === (i + 1).toString())) {\n          index = i + 1;\n        }\n      }\n      if (index === -1) {\n        index = indexes.length + 1;\n      }\n      return index.toString();\n    };\n  }\n  getDefaultStylesheet() {\n    let styles = [{\n      selector: \"node[label]\",\n      style: {}\n    }, {\n      selector: \"edge[label]\",\n      style: {}\n    }];\n    if (this.props.is_nodeid_visible) {\n      styles[0].style = {\n        label: \"data(label)\",\n        \"font-size\": \"18\"\n      };\n      // \"background-color\": \"#527\",\n    }\n    if (this.props.is_weights_visible) {\n      styles[1].style = {\n        label: \"data(label)\",\n        \"font-size\": \"18\",\n        \"edge-text-rotation\": \"autorotate\",\n        color: \"#fff\",\n        \"text-outline-color\": \"#000\",\n        \"text-outline-width\": 3\n      };\n    }\n    return styles;\n  }\n  update_layout() {\n    if (this.cy) {\n      this.props.graph.nodes.forEach(node => {\n        var _this$cy;\n        (_this$cy = this.cy) === null || _this$cy === void 0 ? void 0 : _this$cy.nodes(\"node#\" + node.id)[0].css({\n          \"background-color\": node.color\n        });\n        console.log(\"Node\", node.id, node.color);\n      });\n      this.props.graph.edges.forEach(edge => {\n        var _this$cy2;\n        (_this$cy2 = this.cy) === null || _this$cy2 === void 0 ? void 0 : _this$cy2.edges('[source = \"' + edge.source.id + '\"][target = \"' + edge.target.id + '\"]').style({\n          \"line-color\": edge.color\n        });\n        console.log(\"Edge\", edge.id, edge.color);\n      });\n    }\n  }\n  componentDidMount() {\n    var _this$props$visualiza, _document$getElementB, _document$getElementB2, _document$getElementB3, _document$getElementB4, _document$getElementB5, _document$getElementB6, _document$getElementB7, _document$getElementB8, _document$getElementB9, _document$getElementB10, _document$getElementB11;\n    this.cy = cytoscape({\n      container: document.getElementById(this.props.id),\n      layout: {\n        name: (_this$props$visualiza = this.props.visualization_policy) !== null && _this$props$visualiza !== void 0 ? _this$props$visualiza : \"circle\"\n      },\n      elements: this.props.graph.toJSONFormat(),\n      style: this.getDefaultStylesheet()\n    });\n    this.update_layout();\n    if (this.props.ignoreToolbar) return;\n    (_document$getElementB = document.getElementById(\"addNodeButton\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.addEventListener(\"click\", this.addNode);\n    (_document$getElementB2 = document.getElementById(\"deleteNodeButton\")) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.addEventListener(\"click\", () => {\n      var _this$cy3;\n      let selected = (_this$cy3 = this.cy) === null || _this$cy3 === void 0 ? void 0 : _this$cy3.nodes(\":selected\")[0];\n      if (selected) {\n        let delnode = this.props.graph.getNode(selected.id());\n        if (delnode) {\n          this.props.graph.popNode(delnode);\n          this.forceUpdate();\n        }\n      }\n    });\n    (_document$getElementB3 = document.getElementById(\"concatNodeButton\")) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.addEventListener(\"click\", () => {\n      var _this$cy4;\n      let selected = (_this$cy4 = this.cy) === null || _this$cy4 === void 0 ? void 0 : _this$cy4.nodes(\":selected\");\n      if ((selected === null || selected === void 0 ? void 0 : selected.length) === 2) {\n        let first = selected[0].id();\n        let second = selected[1].id();\n        let node1 = this.props.graph.getNode(first);\n        let node2 = this.props.graph.getNode(second);\n        if (node1 && node2) {\n          let edge12 = new Edge(this.getNewEdgeId(), node1, node2, \"\", \"0\");\n          this.props.graph.addEdge(edge12);\n          this.forceUpdate();\n        }\n      }\n    });\n    (_document$getElementB4 = document.getElementById(\"deleteEdgeButton\")) === null || _document$getElementB4 === void 0 ? void 0 : _document$getElementB4.addEventListener(\"click\", () => {\n      var _this$cy5;\n      let selected = (_this$cy5 = this.cy) === null || _this$cy5 === void 0 ? void 0 : _this$cy5.edges(\":selected\")[0];\n      if (selected) {\n        let source = this.props.graph.getNode(selected.source().id());\n        let target = this.props.graph.getNode(selected.target().id());\n        if (source && target) {\n          let deledge = this.props.graph.getEdge(source, target);\n          if (deledge) {\n            this.props.graph.popEdge(deledge);\n            this.forceUpdate();\n          }\n        }\n      }\n    });\n    (_document$getElementB5 = document.getElementById(\"recolorNodeButton\")) === null || _document$getElementB5 === void 0 ? void 0 : _document$getElementB5.addEventListener(\"click\", () => {\n      var _this$cy6;\n      let selected = (_this$cy6 = this.cy) === null || _this$cy6 === void 0 ? void 0 : _this$cy6.nodes(\":selected\");\n      if (selected) {\n        selected.forEach(element => {\n          let node = this.props.graph.getNode(element.id());\n          let color = document.getElementById(\"nodeColor\").value;\n          node === null || node === void 0 ? void 0 : node.setColor(color);\n          this.forceUpdate();\n        });\n      }\n    });\n    (_document$getElementB6 = document.getElementById(\"recolorEdgeButton\")) === null || _document$getElementB6 === void 0 ? void 0 : _document$getElementB6.addEventListener(\"click\", () => {\n      var _this$cy7;\n      let selected = (_this$cy7 = this.cy) === null || _this$cy7 === void 0 ? void 0 : _this$cy7.edges(\":selected\");\n      if (selected) {\n        selected.forEach(element => {\n          let node_source = this.props.graph.getNode(element.source().id());\n          let node_target = this.props.graph.getNode(element.target().id());\n          if (node_source && node_target) {\n            let edge = this.props.graph.getEdge(node_source, node_target);\n            let color = document.getElementById(\"nodeColor\").value;\n            edge === null || edge === void 0 ? void 0 : edge.setColor(color);\n            this.forceUpdate();\n          }\n        });\n      }\n    });\n    (_document$getElementB7 = document.getElementById(\"colorAdjNodeButton\")) === null || _document$getElementB7 === void 0 ? void 0 : _document$getElementB7.addEventListener(\"click\", () => {\n      var _this$cy8;\n      let selected = (_this$cy8 = this.cy) === null || _this$cy8 === void 0 ? void 0 : _this$cy8.nodes(\":selected\")[0];\n      if (selected) {\n        let node = this.props.graph.getNode(selected.id());\n        if (node) {\n          let adj_nodes = this.props.graph.getAdjNodes(node);\n          adj_nodes.forEach(node => {\n            node.setColor(\"red\");\n            this.forceUpdate();\n          });\n        }\n      }\n    });\n    (_document$getElementB8 = document.getElementById(\"colorAdjEdgeButton\")) === null || _document$getElementB8 === void 0 ? void 0 : _document$getElementB8.addEventListener(\"click\", () => {\n      var _this$cy9;\n      let selected = (_this$cy9 = this.cy) === null || _this$cy9 === void 0 ? void 0 : _this$cy9.edges(\":selected\")[0];\n      if (selected) {\n        let source = this.props.graph.getNode(selected.source().id());\n        let target = this.props.graph.getNode(selected.target().id());\n        if (source && target) {\n          let edge = this.props.graph.getEdge(source, target);\n          if (edge) {\n            let adj_edges = this.props.graph.getAdjEdges(edge);\n            adj_edges.forEach(edge => {\n              edge.setColor(\"red\");\n              this.forceUpdate();\n            });\n          }\n        }\n      }\n    });\n    (_document$getElementB9 = document.getElementById(\"uncolorNodeButton\")) === null || _document$getElementB9 === void 0 ? void 0 : _document$getElementB9.addEventListener(\"click\", () => {\n      this.props.graph.nodes.forEach(node => {\n        node.setColor(\" \");\n        this.forceUpdate();\n      });\n      this.props.graph.edges.forEach(edge => {\n        edge.setColor(\" \");\n        this.forceUpdate();\n      });\n    });\n    (_document$getElementB10 = document.getElementById(\"setNodeName\")) === null || _document$getElementB10 === void 0 ? void 0 : _document$getElementB10.addEventListener(\"click\", () => {\n      var _this$cy10;\n      let selected = (_this$cy10 = this.cy) === null || _this$cy10 === void 0 ? void 0 : _this$cy10.nodes(\":selected\");\n      if (selected) {\n        selected.forEach(element => {\n          let node = this.props.graph.getNode(element.id());\n          // let label = (document.getElementById(\"nodeNameInput\") as HTMLInputElement).value\n          let label = prompt(\"Введите имя вершины\", \"\");\n          node === null || node === void 0 ? void 0 : node.setLabel(label);\n          this.forceUpdate();\n        });\n      }\n    });\n    (_document$getElementB11 = document.getElementById(\"setEdgeWeight\")) === null || _document$getElementB11 === void 0 ? void 0 : _document$getElementB11.addEventListener(\"click\", () => {\n      var _this$cy11;\n      let selected = (_this$cy11 = this.cy) === null || _this$cy11 === void 0 ? void 0 : _this$cy11.edges(\":selected\");\n      if (selected) {\n        selected.forEach(element => {\n          let node_source = this.props.graph.getNode(element.source().id());\n          let node_target = this.props.graph.getNode(element.target().id());\n          if (node_source && node_target) {\n            let edge = this.props.graph.getEdge(node_source, node_target);\n            // let weight = (document.getElementById(\"edgeWeightInput\") as HTMLInputElement).value\n            let weight = prompt(\"Введите вес ребра\", \"\");\n            edge === null || edge === void 0 ? void 0 : edge.setLabel(weight);\n            this.forceUpdate();\n          }\n        });\n      }\n    });\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    var _this$props$visualiza2;\n    let elms = this.props.graph.toJSONFormat();\n    this.cy = cytoscape({\n      container: document.getElementById(this.props.id),\n      layout: {\n        name: (_this$props$visualiza2 = this.props.visualization_policy) !== null && _this$props$visualiza2 !== void 0 ? _this$props$visualiza2 : \"circle\"\n      },\n      elements: elms,\n      style: this.getDefaultStylesheet()\n    });\n    this.update_layout();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.id,\n      className: this.props.className\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 12\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Node","cytoscape","Edge","jsxDEV","_jsxDEV","GraphController","Component","constructor","props","cy","addNode","index","indexes","graph","nodes","forEach","node","push","id","i","length","find","element","toString","forceUpdate","getNewEdgeId","edges","edge","getDefaultStylesheet","styles","selector","style","is_nodeid_visible","label","is_weights_visible","color","update_layout","_this$cy","css","console","log","_this$cy2","source","target","componentDidMount","_this$props$visualiza","_document$getElementB","_document$getElementB2","_document$getElementB3","_document$getElementB4","_document$getElementB5","_document$getElementB6","_document$getElementB7","_document$getElementB8","_document$getElementB9","_document$getElementB10","_document$getElementB11","container","document","getElementById","layout","name","visualization_policy","elements","toJSONFormat","ignoreToolbar","addEventListener","_this$cy3","selected","delnode","getNode","popNode","_this$cy4","first","second","node1","node2","edge12","addEdge","_this$cy5","deledge","getEdge","popEdge","_this$cy6","value","setColor","_this$cy7","node_source","node_target","_this$cy8","adj_nodes","getAdjNodes","_this$cy9","adj_edges","getAdjEdges","_this$cy10","prompt","setLabel","_this$cy11","weight","componentDidUpdate","prevProps","prevState","snapshot","_this$props$visualiza2","elms","render","className","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/GraphLibrary/GraphController.tsx"],"sourcesContent":["// import React from 'react';\n// import { Graph } from './Graph';\n// import { Node } from './Node';\n// import cytoscape from 'cytoscape';\n// import { Edge } from './Edge';\n\n\n// interface IGraphControllerProps<T1, T2> {\n//     id: string,\n//     className: string,\n//     graph: Graph<T1, T2>,\n//     visualization_policy?: string,\n//     is_nodeid_visible?: boolean,\n//     is_weights_visible?: boolean,\n// }\n\n\n// export class GraphController<T1, T2> extends React.Component<IGraphControllerProps<T1, T2>> {\n    \n//     cy?: cytoscape.Core\n\n//     constructor(props: IGraphControllerProps<T1,T2>){\n//             super(props)\n//     }\n\n//     private getDefaultStylesheet() {\n\n//         let styles = [\n//             {\n//                 selector: \"node[label]\", \n//                 style: {}\n//             },\n//             {\n//                 selector: \"edge[label]\", \n//                 style: {}\n//             },\n//         ]\n\n//         if (this.props.is_nodeid_visible){\n//             styles[0].style = {\n//                 label: \"data(label)\",\n//                 \"font-size\": \"18\",\n//             }            \n//             // \"background-color\": \"#527\",\n//         }\n\n//         if (this.props.is_weights_visible){\n//             styles[1].style = {\n//                 label: 'data(label)',\n//                 \"font-size\": \"18\",\n//                 \"edge-text-rotation\": \"autorotate\",\n//                 \"color\": \"#fff\",\n//                 \"text-outline-color\": \"#000\",\n//                 \"text-outline-width\": 3\n//             }\n//         }\n\n//         return styles\n//     }\n\n//     private update_layout(){\n//         if (this.cy){\n//             this.props.graph.nodes.forEach(node => {\n//                 this.cy?.nodes(\"node#\" + node.id)[0].css({'background-color': node.color})\n//                 console.log(\"Node\", node.id, node.color)\n//             });\n//             this.props.graph.edges.forEach(edge => {\n//                 this.cy?.edges('[source = \"'+ edge.source.id + '\"][target = \"' + edge.target.id  + '\"]').style({'line-color': edge.color})\n//                 console.log(\"Edge\", edge.id, edge.color)\n//             });\n//         }\n//     }\n\n//     componentDidMount() {             \n//         this.cy = cytoscape({container: document.getElementById(this.props.id),\n//                             layout: {name: this.props.visualization_policy ?? \"circle\"},\n//                             elements: this.props.graph.toJSONFormat(),\n//                             style: this.getDefaultStylesheet()\n//         })\n//         this.update_layout()\n\n \n//         document.getElementById(\"addNodeButton\")?.addEventListener(\"click\", this.addNode);\n        \n//         document.getElementById(\"deleteNodeButton\")?.addEventListener(\"click\", () => {\n//             let selected = this.cy?.nodes(\":selected\")[0];\n//             if (selected){                \n//                 let delnode = this.props.graph.getNode(selected.id())\n//                 if (delnode){\n//                     this.props.graph.popNode(delnode)\n//                     this.forceUpdate()\n//                 }\n//             }\n//         });\n\n//         document.getElementById(\"concatNodeButton\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.nodes(\":selected\")\n//             if (selected?.length === 2){\n//                 let first = selected[0].id()\n//                 let second = selected[1].id()\n//                 let node1 = this.props.graph.getNode(first)\n//                 let node2 = this.props.graph.getNode(second)\n//                 if (node1 && node2) {\n//                     let edge12: Edge<T1, T2> = new Edge(this.getNewEdgeId(), node1, node2, \"\", \"0\")\n//                     this.props.graph.addEdge(edge12)\n//                     this.forceUpdate()\n//                 }\n//             }\n//         });\n\n//         document.getElementById(\"deleteEdgeButton\")?.addEventListener(\"click\", () => {\n//             let selected = this.cy?.edges(\":selected\")[0];\n//             if (selected){                \n//                 let source = this.props.graph.getNode(selected.source().id())\n//                 let target = this.props.graph.getNode(selected.target().id())\n//                 if (source && target){\n//                     let deledge = this.props.graph.getEdge(source, target)\n//                     if (deledge){\n//                         this.props.graph.popEdge(deledge)\n//                         this.forceUpdate()\n//                     }\n//                 }\n                   \n//             }\n//         });\n\n//         document.getElementById(\"recolorNodeButton\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.nodes(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node = this.props.graph.getNode(element.id())\n//                     let color = (document.getElementById(\"nodeColor\") as HTMLInputElement).value\n//                     node?.setColor(color)\n//                     this.forceUpdate()\n//                 });\n//             }\n//         });\n\n//         document.getElementById(\"recolorEdgeButton\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.edges(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node_source = this.props.graph.getNode(element.source().id())\n//                     let node_target = this.props.graph.getNode(element.target().id())\n//                     if (node_source && node_target){\n//                         let edge = this.props.graph.getEdge(node_source, node_target)\n//                         let color = (document.getElementById(\"nodeColor\") as HTMLInputElement).value\n//                         edge?.setColor(color)\n//                         this.forceUpdate()\n//                     }\n//                 });\n//             }\n//         });\n\n//         document.getElementById(\"colorAdjNodeButton\")?.addEventListener(\"click\", () => {    \n//             let selected = this.cy?.nodes(\":selected\")[0];\n//             if (selected){         \n//                 let node = this.props.graph.getNode(selected.id())\n//                 if (node){\n//                     let adj_nodes = this.props.graph.getAdjNodes(node)\n//                     adj_nodes.forEach(node =>{\n//                         node.setColor(\"red\")\n//                         this.forceUpdate()\n//                     })\n//                 }\n//             }\n//         });\n\n//         document.getElementById(\"colorAdjEdgeButton\")?.addEventListener(\"click\", () => {    \n//             let selected = this.cy?.edges(\":selected\")[0];\n//             if (selected){                \n//                 let source = this.props.graph.getNode(selected.source().id())\n//                 let target = this.props.graph.getNode(selected.target().id())\n//                 if (source && target){\n//                     let edge = this.props.graph.getEdge(source, target)\n//                     if (edge){\n//                         let adj_edges = this.props.graph.getAdjEdges(edge)\n//                         adj_edges.forEach(edge =>{\n//                             edge.setColor(\"red\")\n//                             this.forceUpdate()\n//                         })\n//                     }\n//                 }                   \n//             }\n//         });\n\n//         document.getElementById(\"uncolorNodeButton\")?.addEventListener(\"click\", () => {    \n//             this.props.graph.nodes.forEach(node => {\n//                 node.setColor(\" \")\n//                 this.forceUpdate()\n//             })\n//             this.props.graph.edges.forEach(edge => {\n//                 edge.setColor(\" \")\n//                 this.forceUpdate()\n//             })\n//         });\n\n//         document.getElementById(\"setNodeName\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.nodes(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node = this.props.graph.getNode(element.id())\n//                     // let label = (document.getElementById(\"nodeNameInput\") as HTMLInputElement).value\n//                     let label = prompt(\"Введите имя вершины\", \"\");\n//                     node?.setLabel(label)\n//                     this.forceUpdate()\n//                 });\n//             }\n//         });\n\n//         document.getElementById(\"setEdgeWeight\")?.addEventListener(\"click\", () => {            \n//             let selected = this.cy?.edges(\":selected\")\n//             if (selected){                \n//                 selected.forEach(element => {\n//                     let node_source = this.props.graph.getNode(element.source().id())\n//                     let node_target = this.props.graph.getNode(element.target().id())\n//                     if (node_source && node_target){\n//                         let edge = this.props.graph.getEdge(node_source, node_target)\n//                         // let weight = (document.getElementById(\"edgeWeightInput\") as HTMLInputElement).value\n//                         let weight = prompt(\"Введите вес ребра\", \"\");\n//                         edge?.setLabel(weight)\n//                         this.forceUpdate()\n//                     }\n//                 });\n//             }\n//         });\n//     }\n\n//     componentDidUpdate(prevProps: Readonly<IGraphControllerProps<T1, T2>>, prevState: Readonly<{}>, snapshot?: any): void {\n//         let elms = this.props.graph.toJSONFormat();\n//         this.cy = cytoscape({container: document.getElementById(this.props.id),\n//                             layout: {name: this.props.visualization_policy ?? \"circle\"},\n//                             elements: elms,\n//                             style: this.getDefaultStylesheet()\n                            \n//         })\n//         this.update_layout()\n//     }\n\n//     addNode = () => {\n//         let index: number = -1\n//         let indexes: string[] = []\n        \n        \n//         this.props.graph.nodes.forEach(node => {\n//             indexes.push(node.id)\n//         });\n\n//         for (let i = 0; i < indexes.length; i++){   \n//             if (!indexes.find((element) => element === (i + 1).toString())){\n//                 index = i + 1\n//             }\n//         }\n//         if (index === -1){\n//             index = indexes.length + 1\n//         }\n        \n//         let node: Node<T1> = new Node(index.toString(), index.toString())\n//         this.props.graph.addNode(node)\n//         this.forceUpdate()\n//     }\n\n//     getNewEdgeId = () => {\n//         let index: number = -1\n//         let indexes: string[] = []\n        \n        \n//         this.props.graph.edges.forEach(edge => {\n//             indexes.push(edge.id)\n//         });\n\n//         for (let i = 0; i < indexes.length; i++){   \n//             if (!indexes.find((element) => element === (i + 1).toString())){\n//                 index = i + 1\n//             }\n//         }\n//         if (index === -1){\n//             index = indexes.length + 1\n//         }\n//         return index.toString()\n//     }\n\n//     render() {\n//         return <div id={this.props.id} className={this.props.className}></div>\n//     }\n\n// }\n\nimport React from \"react\";\nimport { Graph } from \"./Graph\";\nimport { Node } from \"./Node\";\nimport cytoscape from \"cytoscape\";\nimport { Edge } from \"./Edge\";\n\ninterface IGraphControllerProps<T1, T2> {\n  id: string;\n  className: string;\n  graph: Graph<T1, T2>;\n  visualization_policy?: string;\n  is_nodeid_visible?: boolean;\n  is_weights_visible?: boolean;\n  ignoreToolbar?: boolean;\n}\n\nexport class GraphController<T1, T2> extends React.Component<\n  IGraphControllerProps<T1, T2>\n> {\n  cy?: cytoscape.Core;\n\n  constructor(props: IGraphControllerProps<T1, T2>) {\n    super(props);\n  }\n\n  private getDefaultStylesheet() {\n    let styles = [\n      {\n        selector: \"node[label]\",\n        style: {},\n      },\n      {\n        selector: \"edge[label]\",\n        style: {},\n      },\n    ];\n\n    if (this.props.is_nodeid_visible) {\n      styles[0].style = {\n        label: \"data(label)\",\n        \"font-size\": \"18\",\n      };\n      // \"background-color\": \"#527\",\n    }\n\n    if (this.props.is_weights_visible) {\n      styles[1].style = {\n        label: \"data(label)\",\n        \"font-size\": \"18\",\n        \"edge-text-rotation\": \"autorotate\",\n        color: \"#fff\",\n        \"text-outline-color\": \"#000\",\n        \"text-outline-width\": 3,\n      };\n    }\n\n    return styles;\n  }\n\n  private update_layout() {\n    if (this.cy) {\n      this.props.graph.nodes.forEach((node) => {\n        this.cy\n          ?.nodes(\"node#\" + node.id)[0]\n          .css({ \"background-color\": node.color });\n        console.log(\"Node\", node.id, node.color);\n      });\n      this.props.graph.edges.forEach((edge) => {\n        this.cy\n          ?.edges(\n            '[source = \"' +\n              edge.source.id +\n              '\"][target = \"' +\n              edge.target.id +\n              '\"]'\n          )\n          .style({ \"line-color\": edge.color });\n        console.log(\"Edge\", edge.id, edge.color);\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.cy = cytoscape({\n      container: document.getElementById(this.props.id),\n      layout: { name: this.props.visualization_policy ?? \"circle\" },\n      elements: this.props.graph.toJSONFormat(),\n      style: this.getDefaultStylesheet(),\n    });\n    this.update_layout();\n    if (this.props.ignoreToolbar) return;\n    document\n      .getElementById(\"addNodeButton\")\n      ?.addEventListener(\"click\", this.addNode);\n\n    document\n      .getElementById(\"deleteNodeButton\")\n      ?.addEventListener(\"click\", () => {\n        let selected = this.cy?.nodes(\":selected\")[0];\n        if (selected) {\n          let delnode = this.props.graph.getNode(selected.id());\n          if (delnode) {\n            this.props.graph.popNode(delnode);\n            this.forceUpdate();\n          }\n        }\n      });\n\n    document\n      .getElementById(\"concatNodeButton\")\n      ?.addEventListener(\"click\", () => {\n        let selected = this.cy?.nodes(\":selected\");\n        if (selected?.length === 2) {\n          let first = selected[0].id();\n          let second = selected[1].id();\n          let node1 = this.props.graph.getNode(first);\n          let node2 = this.props.graph.getNode(second);\n          if (node1 && node2) {\n            let edge12: Edge<T1, T2> = new Edge(\n              this.getNewEdgeId(),\n              node1,\n              node2,\n              \"\",\n              \"0\"\n            );\n            this.props.graph.addEdge(edge12);\n            this.forceUpdate();\n          }\n        }\n      });\n\n    document\n      .getElementById(\"deleteEdgeButton\")\n      ?.addEventListener(\"click\", () => {\n        let selected = this.cy?.edges(\":selected\")[0];\n        if (selected) {\n          let source = this.props.graph.getNode(selected.source().id());\n          let target = this.props.graph.getNode(selected.target().id());\n          if (source && target) {\n            let deledge = this.props.graph.getEdge(source, target);\n            if (deledge) {\n              this.props.graph.popEdge(deledge);\n              this.forceUpdate();\n            }\n          }\n        }\n      });\n\n    document\n      .getElementById(\"recolorNodeButton\")\n      ?.addEventListener(\"click\", () => {\n        let selected = this.cy?.nodes(\":selected\");\n        if (selected) {\n          selected.forEach((element) => {\n            let node = this.props.graph.getNode(element.id());\n            let color = (\n              document.getElementById(\"nodeColor\") as HTMLInputElement\n            ).value;\n            node?.setColor(color);\n            this.forceUpdate();\n          });\n        }\n      });\n\n    document\n      .getElementById(\"recolorEdgeButton\")\n      ?.addEventListener(\"click\", () => {\n        let selected = this.cy?.edges(\":selected\");\n        if (selected) {\n          selected.forEach((element) => {\n            let node_source = this.props.graph.getNode(element.source().id());\n            let node_target = this.props.graph.getNode(element.target().id());\n            if (node_source && node_target) {\n              let edge = this.props.graph.getEdge(node_source, node_target);\n              let color = (\n                document.getElementById(\"nodeColor\") as HTMLInputElement\n              ).value;\n              edge?.setColor(color);\n              this.forceUpdate();\n            }\n          });\n        }\n      });\n\n    document\n      .getElementById(\"colorAdjNodeButton\")\n      ?.addEventListener(\"click\", () => {\n        let selected = this.cy?.nodes(\":selected\")[0];\n        if (selected) {\n          let node = this.props.graph.getNode(selected.id());\n          if (node) {\n            let adj_nodes = this.props.graph.getAdjNodes(node);\n            adj_nodes.forEach((node) => {\n              node.setColor(\"red\");\n              this.forceUpdate();\n            });\n          }\n        }\n      });\n\n    document\n      .getElementById(\"colorAdjEdgeButton\")\n      ?.addEventListener(\"click\", () => {\n        let selected = this.cy?.edges(\":selected\")[0];\n        if (selected) {\n          let source = this.props.graph.getNode(selected.source().id());\n          let target = this.props.graph.getNode(selected.target().id());\n          if (source && target) {\n            let edge = this.props.graph.getEdge(source, target);\n            if (edge) {\n              let adj_edges = this.props.graph.getAdjEdges(edge);\n              adj_edges.forEach((edge) => {\n                edge.setColor(\"red\");\n                this.forceUpdate();\n              });\n            }\n          }\n        }\n      });\n\n    document\n      .getElementById(\"uncolorNodeButton\")\n      ?.addEventListener(\"click\", () => {\n        this.props.graph.nodes.forEach((node) => {\n          node.setColor(\" \");\n          this.forceUpdate();\n        });\n        this.props.graph.edges.forEach((edge) => {\n          edge.setColor(\" \");\n          this.forceUpdate();\n        });\n      });\n\n    document.getElementById(\"setNodeName\")?.addEventListener(\"click\", () => {\n      let selected = this.cy?.nodes(\":selected\");\n      if (selected) {\n        selected.forEach((element) => {\n          let node = this.props.graph.getNode(element.id());\n          // let label = (document.getElementById(\"nodeNameInput\") as HTMLInputElement).value\n          let label = prompt(\"Введите имя вершины\", \"\");\n          node?.setLabel(label);\n          this.forceUpdate();\n        });\n      }\n    });\n\n    document.getElementById(\"setEdgeWeight\")?.addEventListener(\"click\", () => {\n      let selected = this.cy?.edges(\":selected\");\n      if (selected) {\n        selected.forEach((element) => {\n          let node_source = this.props.graph.getNode(element.source().id());\n          let node_target = this.props.graph.getNode(element.target().id());\n          if (node_source && node_target) {\n            let edge = this.props.graph.getEdge(node_source, node_target);\n            // let weight = (document.getElementById(\"edgeWeightInput\") as HTMLInputElement).value\n            let weight = prompt(\"Введите вес ребра\", \"\");\n            edge?.setLabel(weight);\n            this.forceUpdate();\n          }\n        });\n      }\n    });\n  }\n\n  componentDidUpdate(\n    prevProps: Readonly<IGraphControllerProps<T1, T2>>,\n    prevState: Readonly<{}>,\n    snapshot?: any\n  ): void {\n    let elms = this.props.graph.toJSONFormat();\n    this.cy = cytoscape({\n      container: document.getElementById(this.props.id),\n      layout: { name: this.props.visualization_policy ?? \"circle\" },\n      elements: elms,\n      style: this.getDefaultStylesheet(),\n    });\n    this.update_layout();\n  }\n\n  addNode = () => {\n    let index: number = -1;\n    let indexes: string[] = [];\n\n    this.props.graph.nodes.forEach((node) => {\n      indexes.push(node.id);\n    });\n\n    for (let i = 0; i < indexes.length; i++) {\n      if (!indexes.find((element) => element === (i + 1).toString())) {\n        index = i + 1;\n      }\n    }\n    if (index === -1) {\n      index = indexes.length + 1;\n    }\n\n    let node: Node<T1> = new Node(index.toString(), index.toString());\n    this.props.graph.addNode(node);\n    this.forceUpdate();\n  };\n\n  getNewEdgeId = () => {\n    let index: number = -1;\n    let indexes: string[] = [];\n\n    this.props.graph.edges.forEach((edge) => {\n      indexes.push(edge.id);\n    });\n\n    for (let i = 0; i < indexes.length; i++) {\n      if (!indexes.find((element) => element === (i + 1).toString())) {\n        index = i + 1;\n      }\n    }\n    if (index === -1) {\n      index = indexes.length + 1;\n    }\n    return index.toString();\n  };\n\n  render() {\n    return <div id={this.props.id} className={this.props.className}></div>;\n  }\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}