{"ast":null,"code":"// import  Matrix  from '../MatrixLibrary/Matrix';\n// import { MatrixController } from '../MatrixLibrary/MatrixController';\n\n// import { GraphGenerator_1 } from \"../GraphLibrary/GraphGenerator\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./style.css\";\n\n// interface IProps {}\n\n// interface IState<T1, T2> {\n//   graph: Graph<T1, T2>;\n//   task_graph: Graph<T1, T2>;\n// }\n\n// export class Template<T1, T2> extends Component<IProps, IState<T1, T2>> {\n//   visualizing_policy = \"circle\";\n\n//   constructor(props: IProps) {\n//     super(props);\n\n//     let g: Graph<T1, T2> = this.generateGraph();\n//     let t_g: Graph<T1, T2> = this.generateTaskGraph();\n//     this.state = {\n//       graph: g,\n//       task_graph: t_g,\n//     };\n//   }\n\n//   public render() {\n//     const variant = Math.random() < 0.5 ? 1 : 2;\n//     let Task: any = this.task();\n//     if (variant == 1) {\n//       Task = this.task_matrix();\n//     }\n//     return (\n//       <div className={\"App\"} id=\"wrap\">\n//         {\n//           <div>\n//             <div className={\"MainRow\"}>\n//               {this.isGraphModule() && (\n//                 <GraphController\n//                   id={\"cy1\"}\n//                   className=\"GraphCell\"\n//                   graph={this.state.graph}\n//                   visualization_policy={this.visualizing_policy}\n//                   is_nodeid_visible={this.isNodeNameVisible()}\n//                   is_weights_visible={this.isEdgeWeightVisible()}\n//                 />\n//               )}\n//               {!this.isGraphModule() && (\n//                 <div id={\"matrix\"} className={\"GraphCell\"}>\n//                   {/* <MatrixController matrix={this.generateMatrix()} /> */}\n//                 </div>\n//               )}\n//               <div\n//                 id={\"drtfghbjk\"}\n//                 className={`TaskCell ${\n//                   variant === 1 ? \"TaskCell-full-height\" : \"\"\n//                 }`}\n//               >\n//                 <p>Задание</p>\n//                 <Task />\n//               </div>\n//               {variant === 2 && (\n//                 <div id={\"drtfghbjk\"} className={\"TaskCellGraph\"}>\n//                   <GraphController\n//                     id={\"cy2\"}\n//                     className=\"TaskCellGraph\"\n//                     graph={this.state.task_graph}\n//                     visualization_policy={this.visualizing_policy}\n//                     is_nodeid_visible={this.isNodeNameVisible()}\n//                     is_weights_visible={this.isEdgeWeightVisible()}\n//                     ignoreToolbar\n//                   />\n//                 </div>\n//               )}\n//               <div className={\"ToolCell\"}>\n//                 <ToolBar\n//                   next_stage={this.nextStage}\n//                   base_button={true}\n//                   base_button_message={this.helpMessage()}\n//                   graph_manipulations_button={this.isGraphModified()}\n//                   graph_coloring_buttons={this.isGraphRepainted()}\n//                   graph_adj_coloring_buttons={this.isGraphAdjRepainted()}\n//                   graph_naming_buttons={this.isGraphNodeRenamed()}\n//                   graph_weight_buttons={this.isGraphReweight()}\n//                   change_visualization_policy_buttons={this.isVisualizingPolicyChangeble()}\n//                 />\n//               </div>\n//             </div>\n//             <div className={\"LeftBottom\"}>\n//               <TaskTimer timeSeconds={100} onTimerExpire={this.nextStage} />\n//             </div>\n//           </div>\n//         }\n//       </div>\n//     );\n//   }\n\n//   private nextStage() {\n//     console.log(\"next stage\");\n//   }\n\n//   protected helpMessage() {\n//     return \"Good luck!\";\n//   }\n\n//   protected task() {\n//     return () => <p>Это пустой компонент задания</p>;\n//   }\n\n//   protected task_matrix() {\n//     return () => <p>Это пустой компонент задания</p>;\n//   }\n\n//   protected generateGraph() {\n//     let graph: Graph<T1, T2> = GraphGenerator.random(0, 0);\n//     return graph;\n//   }\n\n//   protected generateTaskGraph() {\n//     let task_graph: Graph<T1, T2> = GraphGenerator.random(6, 0.3);\n//     // let task_graph: Graph<T1, T2> = GraphGenerator_1.generateTwoConnectedComponentsGraph();\n//     return task_graph;\n//   }\n\n//   protected isGraphModule() {\n//     return true;\n//   }\n\n//   protected generateMatrix() {\n//     // let matrix: Matrix = new Matrix(1, 1, []);\n//     // return matrix;\n//   }\n\n//   protected isGraphModified() {\n//     return true;\n//   }\n//   protected isGraphRepainted() {\n//     return false;\n//   }\n//   protected isGraphAdjRepainted() {\n//     return false;\n//   }\n//   protected isGraphNodeRenamed() {\n//     return true;\n//   }\n//   protected isGraphReweight() {\n//     return false;\n//   }\n//   protected isVisualizingPolicyChangeble() {\n//     return false;\n//   }\n\n//   protected isNodeNameVisible() {\n//     return true;\n//   }\n//   protected isEdgeWeightVisible() {\n//     return false;\n//   }\n\n//   componentDidMount() {\n//     let vp = document.getElementById(\n//       \"visualization-policy\"\n//     ) as HTMLSelectElement;\n//     vp?.addEventListener(\"change\", () => {\n//       this.visualizing_policy = vp.value;\n//       this.forceUpdate();\n//     });\n//   }\n// }","map":{"version":3,"names":[],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/Template/index.tsx"],"sourcesContent":["import { Component, FC } from \"react\";\nimport TaskTimer from \"../TaskTimer/index\";\nimport { Graph } from \"../GraphLibrary/Graph\";\n// import  Matrix  from '../MatrixLibrary/Matrix';\n// import { MatrixController } from '../MatrixLibrary/MatrixController';\nimport cytoscape from \"cytoscape\";\nimport { GraphGenerator } from \"../GraphLibrary/GraphGenerator\";\n// import { GraphGenerator_1 } from \"../GraphLibrary/GraphGenerator\";\nimport { GraphController } from \"../GraphLibrary/GraphController\";\nimport { ToolBar } from \"../Toolbar/ToolBar\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./style.css\";\n\n// interface IProps {}\n\n// interface IState<T1, T2> {\n//   graph: Graph<T1, T2>;\n//   task_graph: Graph<T1, T2>;\n// }\n\n// export class Template<T1, T2> extends Component<IProps, IState<T1, T2>> {\n//   visualizing_policy = \"circle\";\n\n//   constructor(props: IProps) {\n//     super(props);\n\n//     let g: Graph<T1, T2> = this.generateGraph();\n//     let t_g: Graph<T1, T2> = this.generateTaskGraph();\n//     this.state = {\n//       graph: g,\n//       task_graph: t_g,\n//     };\n//   }\n\n//   public render() {\n//     const variant = Math.random() < 0.5 ? 1 : 2;\n//     let Task: any = this.task();\n//     if (variant == 1) {\n//       Task = this.task_matrix();\n//     }\n//     return (\n//       <div className={\"App\"} id=\"wrap\">\n//         {\n//           <div>\n//             <div className={\"MainRow\"}>\n//               {this.isGraphModule() && (\n//                 <GraphController\n//                   id={\"cy1\"}\n//                   className=\"GraphCell\"\n//                   graph={this.state.graph}\n//                   visualization_policy={this.visualizing_policy}\n//                   is_nodeid_visible={this.isNodeNameVisible()}\n//                   is_weights_visible={this.isEdgeWeightVisible()}\n//                 />\n//               )}\n//               {!this.isGraphModule() && (\n//                 <div id={\"matrix\"} className={\"GraphCell\"}>\n//                   {/* <MatrixController matrix={this.generateMatrix()} /> */}\n//                 </div>\n//               )}\n//               <div\n//                 id={\"drtfghbjk\"}\n//                 className={`TaskCell ${\n//                   variant === 1 ? \"TaskCell-full-height\" : \"\"\n//                 }`}\n//               >\n//                 <p>Задание</p>\n//                 <Task />\n//               </div>\n//               {variant === 2 && (\n//                 <div id={\"drtfghbjk\"} className={\"TaskCellGraph\"}>\n//                   <GraphController\n//                     id={\"cy2\"}\n//                     className=\"TaskCellGraph\"\n//                     graph={this.state.task_graph}\n//                     visualization_policy={this.visualizing_policy}\n//                     is_nodeid_visible={this.isNodeNameVisible()}\n//                     is_weights_visible={this.isEdgeWeightVisible()}\n//                     ignoreToolbar\n//                   />\n//                 </div>\n//               )}\n//               <div className={\"ToolCell\"}>\n//                 <ToolBar\n//                   next_stage={this.nextStage}\n//                   base_button={true}\n//                   base_button_message={this.helpMessage()}\n//                   graph_manipulations_button={this.isGraphModified()}\n//                   graph_coloring_buttons={this.isGraphRepainted()}\n//                   graph_adj_coloring_buttons={this.isGraphAdjRepainted()}\n//                   graph_naming_buttons={this.isGraphNodeRenamed()}\n//                   graph_weight_buttons={this.isGraphReweight()}\n//                   change_visualization_policy_buttons={this.isVisualizingPolicyChangeble()}\n//                 />\n//               </div>\n//             </div>\n//             <div className={\"LeftBottom\"}>\n//               <TaskTimer timeSeconds={100} onTimerExpire={this.nextStage} />\n//             </div>\n//           </div>\n//         }\n//       </div>\n//     );\n//   }\n\n//   private nextStage() {\n//     console.log(\"next stage\");\n//   }\n\n//   protected helpMessage() {\n//     return \"Good luck!\";\n//   }\n\n//   protected task() {\n//     return () => <p>Это пустой компонент задания</p>;\n//   }\n\n//   protected task_matrix() {\n//     return () => <p>Это пустой компонент задания</p>;\n//   }\n\n//   protected generateGraph() {\n//     let graph: Graph<T1, T2> = GraphGenerator.random(0, 0);\n//     return graph;\n//   }\n\n//   protected generateTaskGraph() {\n//     let task_graph: Graph<T1, T2> = GraphGenerator.random(6, 0.3);\n//     // let task_graph: Graph<T1, T2> = GraphGenerator_1.generateTwoConnectedComponentsGraph();\n//     return task_graph;\n//   }\n\n//   protected isGraphModule() {\n//     return true;\n//   }\n\n//   protected generateMatrix() {\n//     // let matrix: Matrix = new Matrix(1, 1, []);\n//     // return matrix;\n//   }\n\n//   protected isGraphModified() {\n//     return true;\n//   }\n//   protected isGraphRepainted() {\n//     return false;\n//   }\n//   protected isGraphAdjRepainted() {\n//     return false;\n//   }\n//   protected isGraphNodeRenamed() {\n//     return true;\n//   }\n//   protected isGraphReweight() {\n//     return false;\n//   }\n//   protected isVisualizingPolicyChangeble() {\n//     return false;\n//   }\n\n//   protected isNodeNameVisible() {\n//     return true;\n//   }\n//   protected isEdgeWeightVisible() {\n//     return false;\n//   }\n\n//   componentDidMount() {\n//     let vp = document.getElementById(\n//       \"visualization-policy\"\n//     ) as HTMLSelectElement;\n//     vp?.addEventListener(\"change\", () => {\n//       this.visualizing_policy = vp.value;\n//       this.forceUpdate();\n//     });\n//   }\n// }\n"],"mappings":"AAGA;AACA;;AAGA;;AAGA,OAAO,kCAAkC;AACzC,OAAO,aAAa;;AAEp},"metadata":{},"sourceType":"module","externalDependencies":[]}