{"version":3,"file":"ts-matrix.mjs","sources":["../src/Matrix.ts","../src/Vector.ts","../src/constants.ts","../src/quat.ts"],"sourcesContent":["export default class Matrix {\n\n    /** Number of rows of the matrix */\n    private _rows: number;\n    /** Number of columns of the matrix */\n    private _columns: number;\n    /** Values of the matrix as a two dimensional array */\n    private _values: number[][];\n\n    constructor(rows: number, columns: number, values?: number[][]) {\n        this._rows = Math.max(rows, 1);\n        this._columns = Math.max(columns, 1);\n        // Create matrix filled with 0 by default\n        this._values = new Array<number[]>(this._rows).fill([]).map(() => new Array<number>(this._columns).fill(0));\n\n        if (values) {\n            this.values = values;\n        }\n    }\n\n    get rows(): number {\n        return this._rows;\n    }\n    get columns(): number {\n        return this._columns;\n    }\n    get values(): number[][] {\n        return this._values;\n    }\n\n    /**\n     * Set values into the matrix.\n     * If the parameters matrix is to wide, the values are cropped to the current matrix size.\n     * It the parameters matrix is to small, remaining cells will be filled with 0.\n     * @param newValues Arrays of new values.\n     */\n    set values(newValues: number[][]) {\n        const minRow = Math.min(newValues.length, this.rows);\n        const minCol = Math.min(newValues[0].length, this.columns);\n        for (let r = 0; r < minRow; r++) {\n            for (let c = 0; c < minCol; c++) {\n                this.values[r][c] = newValues[r][c];\n            }\n        }\n    }\n\n    /**\n     * Get a matrix value, from its position\n     * @param row Matrix line, from 0 to `rows`\n     * @param col Matric column, from 0 to `columns`\n     */\n    at(row: number, col: number): number {\n        return this.values[row][col];\n    }\n\n    /**\n     * Sets all matrix values to 0\n     */\n    reset(): void {\n        this.values = this.values.map((row) => row.map(() => 0));\n    }\n\n    /**\n     * Add an new column to the matrix, filled with 0\n     */\n    addAColumn(): Matrix {\n        return new Matrix(this.rows, this.columns + 1, this.values);\n    }\n\n    /**\n     * Add an new row to the matrix, filled with 0\n     */\n    addARow(): Matrix {\n        return new Matrix(this.rows + 1, this.columns, this.values);\n    }\n\n    /**\n     * Check if two matrix are equals, value by value\n     * @param mat The matrix against to check equality\n     */\n    equals(mat: Matrix): boolean {\n        // Reduce on rows -> reduce on columns -> if a value != then false!\n        return (this.rows === mat.rows && this.columns === mat.columns)\n            && this.values.reduce(// Rows\n                (eql: boolean, row, i) => eql && row.reduce(// Columns (real values)\n                        (eql2: boolean, val, j) => eql2 && mat.at(i, j) === val, eql)\n                , true);\n    }\n\n    /**\n     * Sets the matrix as an identity matrix\n     */\n    setAsIdentity() {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        this.values.forEach((row, i) => {\n            row.forEach((c, j) => {\n                this.values[i][j] = i === j ? 1 : 0;\n            });\n        });\n        return this;\n    }\n\n    /**\n     * Gets an identity matrix (1 on diagonal)\n     * @param dimension Dimension of the squared matrix\n     */\n    static identity(dimension: number): Matrix {\n        if (dimension < 1) throw Error('Dimension error! Matrix dimension must be positive.');\n        return new Matrix(dimension, dimension).setAsIdentity();\n    }\n\n    /**\n     * Computes the product with another matrix\n     * @param mat The second operand matrix\n     * @throws Error if matrixA.columns != matrixB.rows\n     * @return A new Matrix, result of the multiplication\n     */\n    multiply(mat: Matrix): Matrix {\n        if (this.columns !== mat.rows) throw new Error(\"Dimension error! The operand matrix must have the same number of rows as 'this' matrix columns!\");\n        const resMatrix = new Matrix(this.rows, mat.columns);\n        resMatrix.values = resMatrix.values.map((row, i) => {\n            return row.map((val, j) => {\n                return this.values[i].reduce((sum, elm, k) => sum + (elm * mat.at(k, j)), 0);\n            });\n        });\n        return resMatrix;\n    }\n\n    /**\n     * Get the position, from its matrix value\n     * @param value The value to search\n     * @return The position of the value, or -1 if not found\n     */\n    indexOf(value: number): [number, number]  {\n      for(let i = 0; i < this.rows; i++) {\n        for(let j = 0; j < this.columns; j++) {\n          if(this.values[i][j] === value) return [i, j];\n        }\n      }\n\n      return [-1, -1];\n    }\n\n    /**\n     * Computes the maximum value of the matrix\n     * @return The maximum value\n     */\n    max(): number {\n      return this.values.reduce((max, row) => Math.max(max, ...row), -Infinity);\n    }\n\n    /**\n     * Computes the minimum value of the matrix\n     * @return The minimum value\n     * @throws Error if the matrix is empty\n     */\n    min(): number {\n      return this.values.reduce((min, row) => Math.min(min, ...row), Infinity);\n    }\n\n    /**\n     * Rounds all matrix values to the nearest integer\n     * @return A new matrix with the rounded values\n     */\n    round(): Matrix {\n      return new Matrix(this.rows, this.columns, this.values.map(row => row.map(val => Math.round(val))));\n    }\n\n    /**\n     * Computes the determinant of the matrix\n     * @throws Error if the matrix is not squared\n     */\n    determinant(): number {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        if (this.rows === this.columns && this.columns === 1) { return this.values[0][0]; }\n\n        let det = 0;\n        let sign = 1;\n        if (this.rows === 2) {\n            det = this.values[0][0] * this.values[1][1] - this.values[1][0] * this.values[0][1];\n        } else {\n            for (let i = 0; i < this.rows; i++) {\n                const minor = this.getCofactor(0, i);\n                det += sign * this.at(0, i) * minor.determinant();\n                sign = -sign;\n            }\n        }\n        return det;\n    }\n\n    /**\n     * Gets a cofactor matrix\n     * @param row The row to omit in the matrix\n     * @param col The column to omit in the matrix\n     * @return The cofactor matrix sized (r-1)x(c-1)\n     */\n    getCofactor(row: number, col: number): Matrix {\n        return new Matrix(this.rows - 1, this.columns - 1, this.values\n            .filter((v, i) => i !== row) // Remove the unnecessary row\n            .map((c) => c.filter((v, i) => i !== col)));\n    }\n\n    /**\n     * Computes a transposed the matrix\n     * @return A new matrix sized (columns) x (rows)\n     */\n    transpose(): Matrix {\n        return new Matrix(this.columns, this.rows, new Array<number[]>(this.columns).fill([])\n            .map((row, i) => new Array<number>(this.rows).fill(0).map((c, j) => this.at(j, i))));\n    }\n\n    /**\n     * Computes the inversed matrix\n     * @return A new matrix inversed\n     */\n    inverse() {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        const det = this.determinant();\n        if (det === 0) throw new Error(\"Determinant is 0, can't compute inverse.\");\n\n        // Get cofactor matrix: i.e. for each matrix value, get the cofactor's determinant\n        const cofactorMatrix = new Matrix (this.rows, this.columns,\n            this.values.map((row, i) => row.map((val, j) => {\n                const sign = Math.pow(-1, i + j);\n                return sign * this.getCofactor(i, j).determinant();\n            })));\n        // Transpose it\n        const transposedCofactor = cofactorMatrix.transpose();\n        // Compute inverse of transposed / determinant on each value\n        return new Matrix(this.rows, this.columns,\n            this.values.map((row, i) => row.map((val, j) => transposedCofactor.at(i, j) / det)));\n    }\n\n    toString(): string {\n        return `[${this.values.map(row => `[${row.join(', ')}]`).join(',\\n')}]`;\n    }\n}\n","export default class Vector {\n\n    /** Values of the vector */\n    private _values: number[];\n\n    constructor(values?: number[]) {\n        // Create matrix filled with 0 by default\n        this._values = new Array<number>((values || [0]).length).fill(0);\n\n        if (values) {\n            this.values = values;\n        }\n    }\n\n    get rows() {\n        return this.values.length;\n    }\n\n    get values() {\n        return this._values;\n    }\n\n    /**\n     * Set values into the vector.\n     * If the parameters vector is to wide, the values are cropped to the current vector size.\n     * It the parameters vector is to small, remaining cells will be filled with 0.\n     * @param newValues Arrays of new values.\n     */\n    set values(newValues: number[]) {\n        const minSize = Math.min(this.values.length, newValues.length);\n        for (let i = 0; i < minSize; i++) {\n            this.values[i] = newValues[i];\n        }\n    }\n\n    /**\n     * Calculates the angle in radians between vector and the receiver.\n     * @param vector The operand vector\n     * @return An angle, between 0 and +Ï€ inclusive.\n     */\n    angleFrom(vector: Vector): number {\n      if (this.rows !== vector.rows) throw new Error('To calculate the angle, vectors must have the same dimension!');\n      const dot = this.dot(vector);\n      const cos = dot / (this.length() * vector.length());\n      return Math.acos(cos);\n    }\n\n    /**\n     * Calculates the distance between vector and the receiver.\n     * Equivalent to |receiver - vector|\n     * @param vector The operand vector\n     * @return The distance (absolute value) between the two vectors\n     */  \n    distanceFrom(vector: Vector): number {\n      if(this.rows !== vector.rows) throw new Error('To calculate the distance, vectors must have the same dimension!');\n      return this.subtract(vector).length();\n    }\n\n    /**\n     * Get a matrix value, from its position\n     * @param row Matrix line, from 0 to `rows`\n     */\n    at(row: number): number {\n        return this.values[row];\n    }\n\n    /**\n     * Get the position, from its matrix value\n     * @param value The value to search\n     * @return The position of the value, or -1 if not found\n     */\n    indexOf(value: number): number  {\n      return this.values.indexOf(value);\n    }\n\n    /**\n     * Sets all matrix values to 0\n     */\n    reset(): void {\n        this.values = this.values.fill(0);\n    }\n\n    /**\n     * Add an new row to the matrix, filled with 0\n     */\n    addAValue(): Vector {\n        this.values.push(0);\n        return new Vector(this.values);\n    }\n\n    /**\n     * Check if two matrix are equals, value by value\n     * @param mat The matrix against to check equality\n     */\n    equals(vec: Vector): boolean {\n        return (this.rows === vec.rows)\n            && this.values.reduce((eql: boolean, val, i) => eql && vec.at(i) === val, true);\n    }\n\n    /**\n     * Negate all values of the vector (get the opposite sign)\n     * @return A new vector whose all values have the opposed sign\n     */\n    negate(): Vector {\n        return new Vector(this.values.map((val) => -val));\n    }\n\n    /** Get the length of the vector */\n    length(): number {\n        return Math.sqrt(this.squaredLength());\n    }\n\n    /** Get the squared length of the vector */\n    squaredLength(): number {\n        return this.dot(this);\n    }\n\n    /**\n     * Add all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    add(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val + vector.at(i)));\n    }\n\n    /**\n     * subtract all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    subtract(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val - vector.at(i)));\n    }\n\n    /**\n     * Multiply all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    multiply(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val * vector.at(i)));\n    }\n\n    /**\n     * Divide all vector values with the same position value of the operand vector\n     * Be aware of divisions by 0!\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    divide(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => {\n            if (vector.at(i) === 0) return val;\n            return (val / vector.at(i));\n        });\n    }\n\n    /**\n     * Computes the maximum value of the vector\n     * @return The maximum value\n     * @throws Error if the vector is empty\n     */\n    max(): number {\n      if (this.rows === 0) throw new Error('Cannot get the maximum value of an empty vector!');\n      return Math.max(...this.values);\n    }\n\n    /**\n     * Computes the minimum value of the vector\n     * @return The minimum value\n     * @throws Error if the vector is empty\n     */\n    min(): number {\n      if (this.rows === 0) throw new Error('Cannot get the minimum value of an empty vector!');\n      return Math.min(...this.values);\n    }\n\n    /**\n     * Rounds all vector values to the nearest integer\n     * @return A new vector with the rounded values\n     * @throws Error if the vector is empty\n     */\n    round(): Vector {\n      if(this.rows === 0) throw new Error('Cannot round an empty vector!');\n      return this.operateOnAllValues((x) => Math.round(x));\n    }\n\n    /**\n     * Multiply all vector values by the given number\n     * @param scale The number to multiply with the values\n     */\n    scale(scale: number): Vector {\n        return this.operateOnAllValues((val) => (val * scale));\n    }\n\n    /**\n     * Run a function on all vector values, as a map.\n     * @param operation The mapping method\n     * @return a new Vector with the operation done on all its values\n     */\n    private operateOnAllValues(operation: (val: number, index: number) => number): Vector {\n        return new Vector(this.values.map(operation));\n    }\n\n    /**\n     * Computes the normalized vector\n     * @return The normalized vector\n     */\n    normalize(): Vector {\n        const vectorLength = this.length();\n        return this.operateOnAllValues((val) => val / vectorLength);\n    }\n\n    /**\n     * Computes the dot product of vectors\n     * @param vector The operand vector\n     */\n    dot(vector: Vector): number {\n        return this.values.reduce((res, val, i) => res + (val * vector.at(i)), 0);\n    }\n\n    /**\n     * Computes the cross product of vectors\n     * @param vector The operand vector\n     */\n    cross(vector: Vector): Vector {\n        if (this.rows < 3 || vector.rows < 3) throw new Error('Cross product is possible on 3D vectors only');\n        const crossValues = new Array<number>(3);\n        crossValues[0] = this.at(1) * vector.at(2) - this.at(2) * vector.at(1);\n        crossValues[1] = this.at(2) * vector.at(0) - this.at(0) * vector.at(2);\n        crossValues[2] = this.at(0) * vector.at(1) - this.at(1) * vector.at(0);\n        return new Vector(crossValues);\n    }\n\n    mix(vector: Vector, time: number): Vector {\n        return new Vector(this.values.map((val, i) => val + time * (vector.at(i) - val)));\n    }\n\n    static get360angle(Va: Vector, Vb: Vector) {\n        if (Va.rows !== 3 || Vb.rows !== 3) throw new Error('Vectors must be in 3D!. You can add a 1 dimension if it is missing.');\n        return -Math.atan2(\n          Vb.cross(Va).dot(new Vector([0, 0, 1]).normalize()),\n          Va.dot(Vb)\n        );\n    }\n\n    toString(): string {\n        return `[${this.values.join(', ')}]`;\n    }\n}\n","export const EPSILON = 0.00001;\n","import { EPSILON } from './constants';\nimport Vector from './Vector';\n\n/**\n * Class representing a Math Quat\n *\n * TODO: To refactor with 'Matrix.ts' style.\n */\nexport default class Quat {\n\n    get x(): number {\n        return this.values[0];\n    }\n\n    set x(value: number) {\n        this.values[0] = value;\n    }\n\n    get y(): number {\n        return this.values[1];\n    }\n\n    set y(value: number) {\n        this.values[1] = value;\n    }\n\n    get z(): number {\n        return this.values[2];\n    }\n\n    set z(value: number) {\n        this.values[2] = value;\n    }\n    \n    get w(): number {\n        return this.values[3];\n    }\n    \n    set w(value: number) {\n        this.values[3] = value;\n    }\n\n    get xy(): [number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n        ];\n    }\n\n    set xy(values: [number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n\n\n    get xyz(): [number, number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n        ];\n    }\n\n    set xyz(values: [number, number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n\n    get xyzw(): [number, number, number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n            this.values[3],\n        ];\n    }\n\n    set xyzw(values: [number, number, number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n\n    constructor(values?: [number, number, number, number]) {\n        if (values !== undefined) {\n            this.xyzw = values;\n        }\n    }\n\n    private values = new Float32Array(4);\n\n    static readonly identity = new Quat().setIdentity();\n\n    at(index: number): number {\n        return this.values[index];\n    }\n\n    reset(): void {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = 0;\n        }\n    }\n\n    copy(dest?: Quat): Quat {\n        if (!dest) { dest = new Quat(); }\n\n        for (let i = 0; i < 4; i++) {\n            dest.values[i] = this.values[i];\n        }\n\n        return dest;\n    }\n\n    roll(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.atan2(2.0 * (x * y + w * z), w * w + x * x - y * y - z * z);\n    }\n\n    pitch(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.atan2(2.0 * (y * z + w * x), w * w - x * x - y * y + z * z);\n    }\n\n    yaw(): number {\n        return Math.asin(2.0 * (this.x * this.z - this.w * this.y));\n    }\n\n    equals(vector: Quat, threshold = EPSILON): boolean {\n        for (let i = 0; i < 4; i++) {\n            if (Math.abs(this.values[i] - vector.at(i)) > threshold) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    setIdentity(): Quat {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 1;\n\n        return this;\n    }\n\n    calculateW(): Quat {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n\n        this.w = -(Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z)));\n\n        return this;\n    }\n\n    inverse(): Quat {\n        const dot = Quat.dot(this, this);\n\n        if (!dot) {\n            this.xyzw = [0, 0, 0, 0];\n\n            return this;\n        }\n\n        const invDot = dot ? 1.0 / dot : 0;\n\n        this.x *= -invDot;\n        this.y *= -invDot;\n        this.z *= -invDot;\n        this.w *= invDot;\n\n        return this;\n    }\n\n    conjugate(): Quat {\n        this.values[0] *= -1;\n        this.values[1] *= -1;\n        this.values[2] *= -1;\n\n        return this;\n    }\n\n    length(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.sqrt(x * x + y * y + z * z + w * w);\n    }\n\n    normalize(dest?: Quat): Quat {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        if (!dest) { dest = this; }\n\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        let length = Math.sqrt(x * x + y * y + z * z + w * w);\n\n        if (!length) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            dest.w = 0;\n\n            return dest;\n        }\n\n        length = 1 / length;\n\n        dest.x = x * length;\n        dest.y = y * length;\n        dest.z = z * length;\n        dest.w = w * length;\n\n        return dest;\n    }\n\n    add(other: Quat): Quat {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] += other.at(i);\n        }\n\n        return this;\n    }\n\n    multiply(other: Quat): Quat {\n        const q1x = this.values[0];\n        const q1y = this.values[1];\n        const q1z = this.values[2];\n        const q1w = this.values[3];\n\n        const q2x = other.x;\n        const q2y = other.y;\n        const q2z = other.z;\n        const q2w = other.w;\n\n        this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        this.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        this.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n\n        return this;\n    }\n\n    static dot(q1: Quat, q2: Quat): number {\n        return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n    }\n\n    static sum(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        dest.x = q1.x + q2.x;\n        dest.y = q1.y + q2.y;\n        dest.z = q1.z + q2.z;\n        dest.w = q1.w + q2.w;\n\n        return dest;\n    }\n\n    static product(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n\n        dest.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        dest.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        dest.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        dest.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n\n        return dest;\n    }\n\n    static cross(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n\n        dest.x = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\n        dest.y = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        dest.z = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\n        dest.w = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\n\n        return dest;\n    }\n\n    static shortMix(q1: Quat, q2: Quat, time: number): Quat {\n        const dest = new Quat();\n\n        if (time <= 0.0) {\n            dest.xyzw = q1.xyzw;\n\n            return dest;\n        } else if (time >= 1.0) {\n            dest.xyzw = q2.xyzw;\n\n            return dest;\n        }\n\n        let cos = Quat.dot(q1, q2);\n        const q2a = q2.copy();\n\n        if (cos < 0.0) {\n            q2a.inverse();\n            cos = -cos;\n        }\n\n        let k0: number;\n        let k1: number;\n\n        if (cos > 0.9999) {\n            k0 = 1 - time;\n            k1 = 0 + time;\n        } else {\n            const sin: number = Math.sqrt(1 - cos * cos);\n            const angle: number = Math.atan2(sin, cos);\n\n            const oneOverSin: number = 1 / sin;\n\n            k0 = Math.sin((1 - time) * angle) * oneOverSin;\n            k1 = Math.sin((0 + time) * angle) * oneOverSin;\n        }\n\n        dest.x = k0 * q1.x + k1 * q2a.x;\n        dest.y = k0 * q1.y + k1 * q2a.y;\n        dest.z = k0 * q1.z + k1 * q2a.z;\n        dest.w = k0 * q1.w + k1 * q2a.w;\n\n        return dest;\n    }\n\n    static mix(q1: Quat, q2: Quat, time: number): Quat {\n        const dest = new Quat();\n\n        const cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n\n        if (Math.abs(cosHalfTheta) >= 1.0) {\n            dest.xyzw = q1.xyzw;\n\n            return dest;\n        }\n\n        const halfTheta = Math.acos(cosHalfTheta);\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            dest.x = q1.x * 0.5 + q2.x * 0.5;\n            dest.y = q1.y * 0.5 + q2.y * 0.5;\n            dest.z = q1.z * 0.5 + q2.z * 0.5;\n            dest.w = q1.w * 0.5 + q2.w * 0.5;\n\n            return dest;\n        }\n\n        const ratioA = Math.sin((1 - time) * halfTheta) / sinHalfTheta;\n        const ratioB = Math.sin(time * halfTheta) / sinHalfTheta;\n\n        dest.x = q1.x * ratioA + q2.x * ratioB;\n        dest.y = q1.y * ratioA + q2.y * ratioB;\n        dest.z = q1.z * ratioA + q2.z * ratioB;\n        dest.w = q1.w * ratioA + q2.w * ratioB;\n\n        return dest;\n    }\n\n    static fromAxisAngle(axis: Vector, angle: number): Quat {\n        if (axis.rows !== 3) throw new Error('The axis vector must be in 3D!');\n        const dest = new Quat();\n\n        angle *= 0.5;\n        const sin = Math.sin(angle);\n\n        dest.x = axis.at(0) * sin;\n        dest.y = axis.at(1) * sin;\n        dest.z = axis.at(2) * sin;\n        dest.w = Math.cos(angle);\n\n        return dest;\n    }\n\n}\n"],"names":["Matrix","rows","columns","values","__publicField","newValues","minRow","minCol","c","row","col","mat","eql","i","eql2","val","j","dimension","resMatrix","sum","elm","k","value","max","min","det","sign","minor","v","transposedCofactor","Vector","minSize","vector","cos","vec","x","scale","operation","vectorLength","res","crossValues","time","Va","Vb","EPSILON","_Quat","index","dest","y","z","w","threshold","dot","invDot","length","other","q1x","q1y","q1z","q1w","q2x","q2y","q2z","q2w","q1","q2","q2a","k0","k1","sin","angle","oneOverSin","cosHalfTheta","halfTheta","sinHalfTheta","ratioA","ratioB","axis","Quat"],"mappings":"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"}