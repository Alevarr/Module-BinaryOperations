{"ast":null,"code":"import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\nexport class GraphGenerator {\n  static random(n_vertex, p_connected, selfconn = false) {\n    let graph = new Graph();\n    for (let i = 0; i < n_vertex; i++) {\n      let node = new Node(i.toString(), i.toString(), \"\");\n      graph.addNode(node);\n    }\n    let edges_ids = [0];\n    graph.nodes.forEach(node1 => {\n      graph.nodes.forEach(node2 => {\n        if (node1.id !== node2.id) {\n          let prob = Math.random();\n          if (p_connected > prob) {\n            let index = 1;\n            if (edges_ids && edges_ids.at(-1)) {\n              index = edges_ids[edges_ids.length - 1] + 1;\n            }\n            edges_ids.push(index);\n            let edge = new Edge(index.toString(), node1, node2, \"\", \"0\");\n            graph.addEdge(edge);\n          }\n        }\n      });\n    });\n    return graph;\n  }\n  static random2components(n1_vertex, n2_vertex, p_connected, selfconn = false) {\n    let graph = new Graph();\n    let node_arr1 = [];\n    let node_arr2 = [];\n    for (let i = 0; i < n1_vertex; i++) {\n      let node = new Node(i.toString(), i.toString(), \"\");\n      graph.addNode(node);\n      node_arr1.push(0);\n    }\n    for (let i = n1_vertex; i < n1_vertex + n2_vertex; i++) {\n      let node = new Node(i.toString(), i.toString(), \"\");\n      graph.addNode(node);\n      node_arr2.push(0);\n    }\n    let edges_ids = [0];\n    graph.nodes.forEach(node1 => {\n      graph.nodes.forEach(node2 => {\n        if (node1.id !== node2.id && (Number(node1.id) < n1_vertex && Number(node2.id) < n1_vertex || Number(node1.id) >= n1_vertex && Number(node2.id) >= n1_vertex)) {\n          let prob = Math.random();\n          if (p_connected > prob) {\n            let index = 1;\n            if (edges_ids && edges_ids.at(-1)) {\n              index = edges_ids[edges_ids.length - 1] + 1;\n            }\n            edges_ids.push(index);\n            let edge = new Edge(index.toString(), node1, node2, \"\", \"0\");\n            graph.addEdge(edge);\n            if (node1.id < n1_vertex.toString()) {\n              node_arr1[Number(node1.id)] += 1;\n              node_arr1[Number(node2.id)] += 1;\n            } else {\n              node_arr2[Number(node1.id) - n1_vertex] += 1;\n              node_arr2[Number(node2.id) - n1_vertex] += 1;\n            }\n          }\n        }\n      });\n    });\n    for (let i = 0; i < n1_vertex; i++) {\n      if (node_arr1[i] === 0) {\n        let index = 1;\n        if (edges_ids && edges_ids.at(-1)) {\n          index = edges_ids[edges_ids.length - 1] + 1;\n        }\n        edges_ids.push(index);\n        let node2_id = Math.floor(Math.random() * (n1_vertex - 1));\n        if (node2_id === i) {\n          if (i === n1_vertex - 1) {\n            node2_id -= 1;\n          } else {\n            node2_id += 1;\n          }\n        }\n        let cur_node = graph.getNode(i.toString());\n        let node2 = graph.getNode(node2_id.toString());\n        let edge = new Edge(index.toString(), cur_node, node2, \"\", \"0\");\n        graph.addEdge(edge);\n      }\n    }\n    for (let i = n1_vertex; i < n1_vertex + n2_vertex; i++) {\n      if (node_arr2[i - n1_vertex] === 0) {\n        let index = 1;\n        if (edges_ids && edges_ids.at(-1)) {\n          index = edges_ids[edges_ids.length - 1] + 1;\n        }\n        edges_ids.push(index);\n        let node2_id = Math.floor(Math.random() * (n2_vertex - 1)) + n1_vertex;\n        if (node2_id === i) {\n          if (i === n1_vertex + n2_vertex - 1) {\n            node2_id -= 1;\n          } else {\n            node2_id += 1;\n          }\n        }\n        let cur_node = graph.getNode(i.toString());\n        let node2 = graph.getNode(node2_id.toString());\n        let edge = new Edge(index.toString(), cur_node, node2, \"\", \"0\");\n        graph.addEdge(edge);\n      }\n    }\n    return graph;\n  }\n}","map":{"version":3,"names":["Graph","Node","Edge","GraphGenerator","random","n_vertex","p_connected","selfconn","graph","i","node","toString","addNode","edges_ids","nodes","forEach","node1","node2","id","prob","Math","index","at","length","push","edge","addEdge","random2components","n1_vertex","n2_vertex","node_arr1","node_arr2","Number","node2_id","floor","cur_node","getNode"],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/GraphLibrary/GraphGenerator.tsx"],"sourcesContent":["import { Graph } from './Graph';\nimport { Node } from './Node';\nimport { Edge } from './Edge';\n\n\nexport class GraphGenerator {\n    \n    public static random<T1, T2>(n_vertex: number, p_connected: number, selfconn: boolean = false){\n        let graph: Graph<T1, T2> = new Graph()\n        for (let i = 0; i < n_vertex; i++){\n            let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n            graph.addNode(node)\n        }\n        let edges_ids: number[] = [0]\n        graph.nodes.forEach(node1 => {\n            graph.nodes.forEach(node2 => {\n                if (node1.id !== node2.id) {\n                    let prob = Math.random()\n                    if (p_connected > prob){\n                        let index = 1\n                        if (edges_ids && edges_ids.at(-1)){\n                            index = edges_ids[edges_ids.length - 1] + 1\n                        }\n                        edges_ids.push(index)\n                        let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\")\n                        graph.addEdge(edge)\n                    }\n                }\n            });\n        });\n        return graph\n    }\n\n    public static random2components<T1, T2>(n1_vertex: number, n2_vertex: number, p_connected: number, selfconn: boolean = false) {\n        let graph: Graph<T1, T2> = new Graph()\n        let node_arr1: number[] = []\n        let node_arr2: number[] = []\n        for (let i = 0; i < n1_vertex; i++) {\n            let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n            graph.addNode(node)\n            node_arr1.push(0)\n        }\n        for (let i = n1_vertex; i < n1_vertex + n2_vertex; i++) {\n            let node: Node<T1> = new Node(i.toString(), i.toString(), \"\")\n            graph.addNode(node);\n            node_arr2.push(0)\n        }\n        let edges_ids: number[] = [0]\n        graph.nodes.forEach(node1 => {\n            graph.nodes.forEach(node2 => {\n                if (node1.id !== node2.id &&\n                    ((Number(node1.id) < n1_vertex && Number(node2.id) < n1_vertex) ||\n                        (Number(node1.id) >= n1_vertex && Number(node2.id) >= n1_vertex))) {\n                    let prob = Math.random()\n                    if (p_connected > prob) {\n                        let index = 1\n                        if (edges_ids && edges_ids.at(-1)) {\n                            index = edges_ids[edges_ids.length - 1] + 1\n                        }\n                        edges_ids.push(index)\n                        let edge: Edge<T1, T2> = new Edge(index.toString(), node1, node2, \"\", \"0\")\n                        graph.addEdge(edge)\n                        if (node1.id < n1_vertex.toString()) {\n                            node_arr1[Number(node1.id)] += 1\n                            node_arr1[Number(node2.id)] += 1\n                        } else {\n                            node_arr2[Number(node1.id) - n1_vertex] += 1\n                            node_arr2[Number(node2.id) - n1_vertex] += 1\n                        }\n                    }\n                }\n            });\n        });\n        for (let i = 0; i < n1_vertex; i++) {\n            if (node_arr1[i] === 0) {\n                let index = 1\n                if (edges_ids && edges_ids.at(-1)) {\n                    index = edges_ids[edges_ids.length - 1] + 1\n                }\n                edges_ids.push(index)\n                let node2_id = Math.floor(Math.random() * (n1_vertex - 1))\n                if (node2_id === i) {\n                    if (i === n1_vertex - 1) {\n                        node2_id -= 1\n                    } else {\n                        node2_id += 1\n                    }\n                }\n                let cur_node: Node<T1> = graph.getNode(i.toString()) as Node<T1>\n                let node2: Node<T1> = graph.getNode(node2_id.toString()) as Node<T1>\n                let edge: Edge<T1, T2> = new Edge(index.toString(), cur_node, node2, \"\", \"0\")\n                graph.addEdge(edge)\n            }\n        }\n        for (let i = n1_vertex; i < n1_vertex + n2_vertex; i++) {\n            if (node_arr2[i - n1_vertex] === 0) {\n                let index = 1\n                if (edges_ids && edges_ids.at(-1)) {\n                    index = edges_ids[edges_ids.length - 1] + 1\n                }\n                edges_ids.push(index)\n                let node2_id = Math.floor(Math.random() * (n2_vertex - 1)) + n1_vertex\n                if (node2_id === i) {\n                    if (i === n1_vertex + n2_vertex - 1) {\n                        node2_id -= 1\n                    } else {\n                        node2_id += 1\n                    }\n                }\n                let cur_node: Node<T1> = graph.getNode(i.toString()) as Node<T1>\n                let node2: Node<T1> = graph.getNode(node2_id.toString()) as Node<T1>\n                let edge: Edge<T1, T2> = new Edge(index.toString(), cur_node, node2, \"\", \"0\")\n                graph.addEdge(edge)\n            }\n        }\n        return graph\n    }\n}\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}