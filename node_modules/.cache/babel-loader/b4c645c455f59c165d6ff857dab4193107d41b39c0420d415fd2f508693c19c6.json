{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/home/marihuyatnik/ERW/Module-BinaryOperations/src/components/ModuleExample/module.tsx"],"sourcesContent":["import { Graph } from \"../GraphLibrary/Graph\";\nimport { GraphGenerator } from \"../GraphLibrary/GraphGenerator\";\nimport { Template } from \"../Template\";\n\n\n// export class ModuleExample<T1, T2> extends Template<T1, T2> {\n    \n//     protected override task(){\n//         let operations: string[] = [\"сеодинения графов\", \"объединения графов\", \"пересечения графов\"];\n//         let i = Math.floor(Math.random() * 3);\n//         let operationString = operations[i];\n        \n//         return () => <p>Провести операцию {operationString}</p>\n//     }\n\n//     protected override task_matrix() {\n//         let operations: string[] = [\"соединения графов\", \"объединения графов\", \"пересечения графов\"];\n//         let i = Math.floor(Math.random() * operations.length);\n//         let operationString = operations[i];\n    \n//         function generateRandomMatrix(vertices: string[]): number[][] {\n//             let size = vertices.length;\n//             let matrix: number[][] = Array.from({ length: size }, () => \n//                 Array.from({ length: size }, () => Math.floor(Math.random() * 2))\n//             );\n//             for (let i = 0; i < size; i++) {\n//                 matrix[i][i] = 0; // Ensure no self-loops\n//             }\n//             return matrix;\n//         }\n    \n//         function renderMatrix(matrix: number[][], vertices: string[]): string {\n//             let headerRow = `<tr><th scope=\"col\"> </th>${vertices.map(v => `<th scope=\"col\">${v}</th>`).join('')}</tr>`;\n//             let bodyRows = matrix.map((row, rowIndex) => {\n//                 let cells = row.map(cell => `<td>${cell}</td>`).join('');\n//                 return `<tr><th scope=\"row\">${vertices[rowIndex]}</th>${cells}</tr>`;\n//             }).join('');\n//             return `<table><thead>${headerRow}</thead><tbody>${bodyRows}</tbody></table>`;\n//         }\n    \n//         function getRandomSubarray(arr: string[], minSize: number, maxSize: number): string[] {\n//             let shuffled = arr.slice(0);\n//             for (let i = arr.length - 1; i > 0; i--) {\n//                 let j = Math.floor(Math.random() * (i + 1));\n//                 [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n//             }\n//             let size = Math.floor(Math.random() * (maxSize - minSize + 1)) + minSize;\n//             let subarray = shuffled.slice(0, size);\n//             return subarray.sort();\n//         }\n    \n//         let allVertices: string[] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"];\n//         let minSize = 2;\n//         let maxSize = 6;\n    \n//         let vertices1 = getRandomSubarray(allVertices, minSize, maxSize);\n//         let vertices2 = getRandomSubarray(allVertices, minSize, maxSize);\n    \n//         let matrix1: number[][] = generateRandomMatrix(vertices1);\n//         let matrix2: number[][] = generateRandomMatrix(vertices2);\n    \n//         return () => <p>Провести операцию {operationString}\n//             <div dangerouslySetInnerHTML={{ __html: renderMatrix(matrix1, vertices1) }} />\n//             <div dangerouslySetInnerHTML={{ __html: renderMatrix(matrix2, vertices2) }} />\n//         </p>;\n//     }\n    \n    \n    \n\n\n//     protected override generateGraph(){\n//         let graph: Graph<T1, T2> = GraphGenerator.random(0, 0.3)\n//         return graph\n//     }\n\n//     protected override isGraphModified(){\n//         return true\n//     }\n    \n//     protected override isGraphRepainted(){\n//         return false\n//     }\n    \n//     protected override isGraphNodeRenamed(){\n//         return true\n//     }\n    \n//     protected override isGraphReweight(){\n//         return false\n//     }\n\n//     protected isVisualizingPolicyChangeble(){\n//         return false\n//     }\n    \n//     protected override isNodeNameVisible(){\n//         return true\n//     }\n\n//     protected override isEdgeWeightVisible(){\n//         return false\n//     }\n\n// }"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}